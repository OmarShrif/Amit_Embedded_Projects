
Glove_For_Deaf_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000334c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000334c  000033e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  000033e8  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  000033e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f34  00000000  00000000  00005d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a838  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e4       	ldi	r30, 0x4C	; 76
      78:	f3 e3       	ldi	r31, 0x33	; 51
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 12 14 	call	0x2824	; 0x2824 <main>
      8a:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_SetPinDirection>:
#include "Utilities.h"
#include "DIO_Reg.h"
#include "Dio_Int.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD)&&(PinNo<=PIN7))
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	08 f0       	brcs	.+2      	; 0xb68 <Dio_SetPinDirection+0x22>
     b66:	ed c0       	rjmp	.+474    	; 0xd42 <Dio_SetPinDirection+0x1fc>
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	88 30       	cpi	r24, 0x08	; 8
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <Dio_SetPinDirection+0x2a>
     b6e:	e9 c0       	rjmp	.+466    	; 0xd42 <Dio_SetPinDirection+0x1fc>
	{
	if(Direction==INPUT)
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	88 23       	and	r24, r24
     b74:	09 f0       	breq	.+2      	; 0xb78 <Dio_SetPinDirection+0x32>
     b76:	73 c0       	rjmp	.+230    	; 0xc5e <Dio_SetPinDirection+0x118>
	{
		switch(GroupNo)
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3f 83       	std	Y+7, r19	; 0x07
     b80:	2e 83       	std	Y+6, r18	; 0x06
     b82:	8e 81       	ldd	r24, Y+6	; 0x06
     b84:	9f 81       	ldd	r25, Y+7	; 0x07
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	91 05       	cpc	r25, r1
     b8a:	59 f1       	breq	.+86     	; 0xbe2 <Dio_SetPinDirection+0x9c>
     b8c:	2e 81       	ldd	r18, Y+6	; 0x06
     b8e:	3f 81       	ldd	r19, Y+7	; 0x07
     b90:	22 30       	cpi	r18, 0x02	; 2
     b92:	31 05       	cpc	r19, r1
     b94:	2c f4       	brge	.+10     	; 0xba0 <Dio_SetPinDirection+0x5a>
     b96:	8e 81       	ldd	r24, Y+6	; 0x06
     b98:	9f 81       	ldd	r25, Y+7	; 0x07
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	69 f0       	breq	.+26     	; 0xbb8 <Dio_SetPinDirection+0x72>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <Dio_SetPinDirection+0x118>
     ba0:	2e 81       	ldd	r18, Y+6	; 0x06
     ba2:	3f 81       	ldd	r19, Y+7	; 0x07
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	89 f1       	breq	.+98     	; 0xc0c <Dio_SetPinDirection+0xc6>
     baa:	8e 81       	ldd	r24, Y+6	; 0x06
     bac:	9f 81       	ldd	r25, Y+7	; 0x07
     bae:	83 30       	cpi	r24, 0x03	; 3
     bb0:	91 05       	cpc	r25, r1
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <Dio_SetPinDirection+0x70>
     bb4:	40 c0       	rjmp	.+128    	; 0xc36 <Dio_SetPinDirection+0xf0>
     bb6:	53 c0       	rjmp	.+166    	; 0xc5e <Dio_SetPinDirection+0x118>
		{
		case GroupA: clr_bit(DDRA, PinNo); break;
     bb8:	aa e3       	ldi	r26, 0x3A	; 58
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	ea e3       	ldi	r30, 0x3A	; 58
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	48 2f       	mov	r20, r24
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	02 2e       	mov	r0, r18
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <Dio_SetPinDirection+0x90>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	0a 94       	dec	r0
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <Dio_SetPinDirection+0x8c>
     bda:	80 95       	com	r24
     bdc:	84 23       	and	r24, r20
     bde:	8c 93       	st	X, r24
     be0:	3e c0       	rjmp	.+124    	; 0xc5e <Dio_SetPinDirection+0x118>
		case GroupB: clr_bit(DDRB, PinNo); break;
     be2:	a7 e3       	ldi	r26, 0x37	; 55
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 e3       	ldi	r30, 0x37	; 55
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	48 2f       	mov	r20, r24
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 2e       	mov	r0, r18
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <Dio_SetPinDirection+0xba>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	0a 94       	dec	r0
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <Dio_SetPinDirection+0xb6>
     c04:	80 95       	com	r24
     c06:	84 23       	and	r24, r20
     c08:	8c 93       	st	X, r24
     c0a:	29 c0       	rjmp	.+82     	; 0xc5e <Dio_SetPinDirection+0x118>
		case GroupC: clr_bit(DDRC, PinNo); break;
     c0c:	a4 e3       	ldi	r26, 0x34	; 52
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e4 e3       	ldi	r30, 0x34	; 52
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <Dio_SetPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <Dio_SetPinDirection+0xe0>
     c2e:	80 95       	com	r24
     c30:	84 23       	and	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	14 c0       	rjmp	.+40     	; 0xc5e <Dio_SetPinDirection+0x118>
		case GroupD: clr_bit(DDRD, PinNo); break;
     c36:	a1 e3       	ldi	r26, 0x31	; 49
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e1 e3       	ldi	r30, 0x31	; 49
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <Dio_SetPinDirection+0x10e>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <Dio_SetPinDirection+0x10a>
     c58:	80 95       	com	r24
     c5a:	84 23       	and	r24, r20
     c5c:	8c 93       	st	X, r24
		}
	}
	if(Direction==OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	09 f0       	breq	.+2      	; 0xc66 <Dio_SetPinDirection+0x120>
     c64:	6e c0       	rjmp	.+220    	; 0xd42 <Dio_SetPinDirection+0x1fc>
	{
		switch(GroupNo)
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	3d 83       	std	Y+5, r19	; 0x05
     c6e:	2c 83       	std	Y+4, r18	; 0x04
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	91 05       	cpc	r25, r1
     c78:	49 f1       	breq	.+82     	; 0xccc <Dio_SetPinDirection+0x186>
     c7a:	2c 81       	ldd	r18, Y+4	; 0x04
     c7c:	3d 81       	ldd	r19, Y+5	; 0x05
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	2c f4       	brge	.+10     	; 0xc8e <Dio_SetPinDirection+0x148>
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	61 f0       	breq	.+24     	; 0xca4 <Dio_SetPinDirection+0x15e>
     c8c:	5a c0       	rjmp	.+180    	; 0xd42 <Dio_SetPinDirection+0x1fc>
     c8e:	2c 81       	ldd	r18, Y+4	; 0x04
     c90:	3d 81       	ldd	r19, Y+5	; 0x05
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	31 05       	cpc	r19, r1
     c96:	71 f1       	breq	.+92     	; 0xcf4 <Dio_SetPinDirection+0x1ae>
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	9d 81       	ldd	r25, Y+5	; 0x05
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	91 05       	cpc	r25, r1
     ca0:	e9 f1       	breq	.+122    	; 0xd1c <Dio_SetPinDirection+0x1d6>
     ca2:	4f c0       	rjmp	.+158    	; 0xd42 <Dio_SetPinDirection+0x1fc>
		{
		case GroupA: set_bit(DDRA, PinNo); break;
     ca4:	aa e3       	ldi	r26, 0x3A	; 58
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ea e3       	ldi	r30, 0x3A	; 58
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <Dio_SetPinDirection+0x17c>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <Dio_SetPinDirection+0x178>
     cc6:	84 2b       	or	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	3b c0       	rjmp	.+118    	; 0xd42 <Dio_SetPinDirection+0x1fc>
		case GroupB: set_bit(DDRB, PinNo); break;
     ccc:	a7 e3       	ldi	r26, 0x37	; 55
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e7 e3       	ldi	r30, 0x37	; 55
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <Dio_SetPinDirection+0x1a4>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <Dio_SetPinDirection+0x1a0>
     cee:	84 2b       	or	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	27 c0       	rjmp	.+78     	; 0xd42 <Dio_SetPinDirection+0x1fc>
		case GroupC: set_bit(DDRC, PinNo); break;
     cf4:	a4 e3       	ldi	r26, 0x34	; 52
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e4 e3       	ldi	r30, 0x34	; 52
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <Dio_SetPinDirection+0x1cc>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <Dio_SetPinDirection+0x1c8>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	13 c0       	rjmp	.+38     	; 0xd42 <Dio_SetPinDirection+0x1fc>
		case GroupD: set_bit(DDRD, PinNo); break;
     d1c:	a1 e3       	ldi	r26, 0x31	; 49
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e1 e3       	ldi	r30, 0x31	; 49
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <Dio_SetPinDirection+0x1f4>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <Dio_SetPinDirection+0x1f0>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
	else
	{
		//not reachable
	}

}
     d42:	27 96       	adiw	r28, 0x07	; 7
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	29 97       	sbiw	r28, 0x09	; 9
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	6a 83       	std	Y+2, r22	; 0x02
     d6c:	4b 83       	std	Y+3, r20	; 0x03
	if(Value==LOW)
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	88 23       	and	r24, r24
     d72:	09 f0       	breq	.+2      	; 0xd76 <Dio_SetPinValue+0x22>
     d74:	73 c0       	rjmp	.+230    	; 0xe5c <Dio_SetPinValue+0x108>
		{
			switch(GroupNo)
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	39 87       	std	Y+9, r19	; 0x09
     d7e:	28 87       	std	Y+8, r18	; 0x08
     d80:	88 85       	ldd	r24, Y+8	; 0x08
     d82:	99 85       	ldd	r25, Y+9	; 0x09
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	91 05       	cpc	r25, r1
     d88:	59 f1       	breq	.+86     	; 0xde0 <Dio_SetPinValue+0x8c>
     d8a:	28 85       	ldd	r18, Y+8	; 0x08
     d8c:	39 85       	ldd	r19, Y+9	; 0x09
     d8e:	22 30       	cpi	r18, 0x02	; 2
     d90:	31 05       	cpc	r19, r1
     d92:	2c f4       	brge	.+10     	; 0xd9e <Dio_SetPinValue+0x4a>
     d94:	88 85       	ldd	r24, Y+8	; 0x08
     d96:	99 85       	ldd	r25, Y+9	; 0x09
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	69 f0       	breq	.+26     	; 0xdb6 <Dio_SetPinValue+0x62>
     d9c:	5f c0       	rjmp	.+190    	; 0xe5c <Dio_SetPinValue+0x108>
     d9e:	28 85       	ldd	r18, Y+8	; 0x08
     da0:	39 85       	ldd	r19, Y+9	; 0x09
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	89 f1       	breq	.+98     	; 0xe0a <Dio_SetPinValue+0xb6>
     da8:	88 85       	ldd	r24, Y+8	; 0x08
     daa:	99 85       	ldd	r25, Y+9	; 0x09
     dac:	83 30       	cpi	r24, 0x03	; 3
     dae:	91 05       	cpc	r25, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <Dio_SetPinValue+0x60>
     db2:	40 c0       	rjmp	.+128    	; 0xe34 <Dio_SetPinValue+0xe0>
     db4:	53 c0       	rjmp	.+166    	; 0xe5c <Dio_SetPinValue+0x108>
			{
			case GroupA: clr_bit(PORTA, PinNo); break;
     db6:	ab e3       	ldi	r26, 0x3B	; 59
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	eb e3       	ldi	r30, 0x3B	; 59
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <Dio_SetPinValue+0x80>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <Dio_SetPinValue+0x7c>
     dd8:	80 95       	com	r24
     dda:	84 23       	and	r24, r20
     ddc:	8c 93       	st	X, r24
     dde:	3e c0       	rjmp	.+124    	; 0xe5c <Dio_SetPinValue+0x108>
			case GroupB: clr_bit(PORTB, PinNo); break;
     de0:	a8 e3       	ldi	r26, 0x38	; 56
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 e3       	ldi	r30, 0x38	; 56
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <Dio_SetPinValue+0xaa>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <Dio_SetPinValue+0xa6>
     e02:	80 95       	com	r24
     e04:	84 23       	and	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	29 c0       	rjmp	.+82     	; 0xe5c <Dio_SetPinValue+0x108>
			case GroupC: clr_bit(PORTC, PinNo); break;
     e0a:	a5 e3       	ldi	r26, 0x35	; 53
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e3       	ldi	r30, 0x35	; 53
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <Dio_SetPinValue+0xd4>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <Dio_SetPinValue+0xd0>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	14 c0       	rjmp	.+40     	; 0xe5c <Dio_SetPinValue+0x108>
			case GroupD: clr_bit(PORTD, PinNo); break;
     e34:	a2 e3       	ldi	r26, 0x32	; 50
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e2 e3       	ldi	r30, 0x32	; 50
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <Dio_SetPinValue+0xfe>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <Dio_SetPinValue+0xfa>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
			}
		}
		if(Value==HIGH)
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	09 f0       	breq	.+2      	; 0xe64 <Dio_SetPinValue+0x110>
     e62:	6e c0       	rjmp	.+220    	; 0xf40 <Dio_SetPinValue+0x1ec>
		{
			switch(GroupNo)
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	3f 83       	std	Y+7, r19	; 0x07
     e6c:	2e 83       	std	Y+6, r18	; 0x06
     e6e:	8e 81       	ldd	r24, Y+6	; 0x06
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	91 05       	cpc	r25, r1
     e76:	49 f1       	breq	.+82     	; 0xeca <Dio_SetPinValue+0x176>
     e78:	2e 81       	ldd	r18, Y+6	; 0x06
     e7a:	3f 81       	ldd	r19, Y+7	; 0x07
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	2c f4       	brge	.+10     	; 0xe8c <Dio_SetPinValue+0x138>
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	9f 81       	ldd	r25, Y+7	; 0x07
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	61 f0       	breq	.+24     	; 0xea2 <Dio_SetPinValue+0x14e>
     e8a:	5a c0       	rjmp	.+180    	; 0xf40 <Dio_SetPinValue+0x1ec>
     e8c:	2e 81       	ldd	r18, Y+6	; 0x06
     e8e:	3f 81       	ldd	r19, Y+7	; 0x07
     e90:	22 30       	cpi	r18, 0x02	; 2
     e92:	31 05       	cpc	r19, r1
     e94:	71 f1       	breq	.+92     	; 0xef2 <Dio_SetPinValue+0x19e>
     e96:	8e 81       	ldd	r24, Y+6	; 0x06
     e98:	9f 81       	ldd	r25, Y+7	; 0x07
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	e9 f1       	breq	.+122    	; 0xf1a <Dio_SetPinValue+0x1c6>
     ea0:	4f c0       	rjmp	.+158    	; 0xf40 <Dio_SetPinValue+0x1ec>
			{
			case GroupA: set_bit(PORTA, PinNo); break;
     ea2:	ab e3       	ldi	r26, 0x3B	; 59
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	eb e3       	ldi	r30, 0x3B	; 59
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	48 2f       	mov	r20, r24
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 2e       	mov	r0, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <Dio_SetPinValue+0x16c>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <Dio_SetPinValue+0x168>
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	3b c0       	rjmp	.+118    	; 0xf40 <Dio_SetPinValue+0x1ec>
			case GroupB: set_bit(PORTB, PinNo); break;
     eca:	a8 e3       	ldi	r26, 0x38	; 56
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e8 e3       	ldi	r30, 0x38	; 56
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <Dio_SetPinValue+0x194>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <Dio_SetPinValue+0x190>
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	27 c0       	rjmp	.+78     	; 0xf40 <Dio_SetPinValue+0x1ec>
			case GroupC: set_bit(PORTC, PinNo); break;
     ef2:	a5 e3       	ldi	r26, 0x35	; 53
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e5 e3       	ldi	r30, 0x35	; 53
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <Dio_SetPinValue+0x1bc>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <Dio_SetPinValue+0x1b8>
     f14:	84 2b       	or	r24, r20
     f16:	8c 93       	st	X, r24
     f18:	13 c0       	rjmp	.+38     	; 0xf40 <Dio_SetPinValue+0x1ec>
			case GroupD: set_bit(PORTD, PinNo); break;
     f1a:	a2 e3       	ldi	r26, 0x32	; 50
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e2 e3       	ldi	r30, 0x32	; 50
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <Dio_SetPinValue+0x1e4>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <Dio_SetPinValue+0x1e0>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
			}
		}
		if(Value==REVERS)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	09 f0       	breq	.+2      	; 0xf48 <Dio_SetPinValue+0x1f4>
     f46:	6e c0       	rjmp	.+220    	; 0x1024 <Dio_SetPinValue+0x2d0>
				{
					switch(GroupNo)
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	3d 83       	std	Y+5, r19	; 0x05
     f50:	2c 83       	std	Y+4, r18	; 0x04
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	91 05       	cpc	r25, r1
     f5a:	49 f1       	breq	.+82     	; 0xfae <Dio_SetPinValue+0x25a>
     f5c:	2c 81       	ldd	r18, Y+4	; 0x04
     f5e:	3d 81       	ldd	r19, Y+5	; 0x05
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	2c f4       	brge	.+10     	; 0xf70 <Dio_SetPinValue+0x21c>
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	9d 81       	ldd	r25, Y+5	; 0x05
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	61 f0       	breq	.+24     	; 0xf86 <Dio_SetPinValue+0x232>
     f6e:	5a c0       	rjmp	.+180    	; 0x1024 <Dio_SetPinValue+0x2d0>
     f70:	2c 81       	ldd	r18, Y+4	; 0x04
     f72:	3d 81       	ldd	r19, Y+5	; 0x05
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	71 f1       	breq	.+92     	; 0xfd6 <Dio_SetPinValue+0x282>
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	91 05       	cpc	r25, r1
     f82:	e9 f1       	breq	.+122    	; 0xffe <Dio_SetPinValue+0x2aa>
     f84:	4f c0       	rjmp	.+158    	; 0x1024 <Dio_SetPinValue+0x2d0>
					{
					case GroupA: tog_bit(PORTA, PinNo); break;
     f86:	ab e3       	ldi	r26, 0x3B	; 59
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	eb e3       	ldi	r30, 0x3B	; 59
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <Dio_SetPinValue+0x250>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <Dio_SetPinValue+0x24c>
     fa8:	84 27       	eor	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	3b c0       	rjmp	.+118    	; 0x1024 <Dio_SetPinValue+0x2d0>
					case GroupB: tog_bit(PORTB, PinNo); break;
     fae:	a8 e3       	ldi	r26, 0x38	; 56
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e8 e3       	ldi	r30, 0x38	; 56
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <Dio_SetPinValue+0x278>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <Dio_SetPinValue+0x274>
     fd0:	84 27       	eor	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	27 c0       	rjmp	.+78     	; 0x1024 <Dio_SetPinValue+0x2d0>
					case GroupC: tog_bit(PORTC, PinNo); break;
     fd6:	a5 e3       	ldi	r26, 0x35	; 53
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e5 e3       	ldi	r30, 0x35	; 53
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <Dio_SetPinValue+0x2a0>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <Dio_SetPinValue+0x29c>
     ff8:	84 27       	eor	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	13 c0       	rjmp	.+38     	; 0x1024 <Dio_SetPinValue+0x2d0>
					case GroupD: tog_bit(PORTD, PinNo); break;
     ffe:	a2 e3       	ldi	r26, 0x32	; 50
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e2 e3       	ldi	r30, 0x32	; 50
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <Dio_SetPinValue+0x2c8>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <Dio_SetPinValue+0x2c4>
    1020:	84 27       	eor	r24, r20
    1022:	8c 93       	st	X, r24
					}
				}
}
    1024:	29 96       	adiw	r28, 0x09	; 9
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <Dio_GetPinValue+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <Dio_GetPinValue+0x8>
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	8a 83       	std	Y+2, r24	; 0x02
    1046:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_value;
	switch(GroupNo)
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	3d 83       	std	Y+5, r19	; 0x05
    1050:	2c 83       	std	Y+4, r18	; 0x04
    1052:	4c 81       	ldd	r20, Y+4	; 0x04
    1054:	5d 81       	ldd	r21, Y+5	; 0x05
    1056:	41 30       	cpi	r20, 0x01	; 1
    1058:	51 05       	cpc	r21, r1
    105a:	41 f1       	breq	.+80     	; 0x10ac <Dio_GetPinValue+0x76>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	91 05       	cpc	r25, r1
    1064:	34 f4       	brge	.+12     	; 0x1072 <Dio_GetPinValue+0x3c>
    1066:	2c 81       	ldd	r18, Y+4	; 0x04
    1068:	3d 81       	ldd	r19, Y+5	; 0x05
    106a:	21 15       	cp	r18, r1
    106c:	31 05       	cpc	r19, r1
    106e:	61 f0       	breq	.+24     	; 0x1088 <Dio_GetPinValue+0x52>
    1070:	52 c0       	rjmp	.+164    	; 0x1116 <Dio_GetPinValue+0xe0>
    1072:	4c 81       	ldd	r20, Y+4	; 0x04
    1074:	5d 81       	ldd	r21, Y+5	; 0x05
    1076:	42 30       	cpi	r20, 0x02	; 2
    1078:	51 05       	cpc	r21, r1
    107a:	51 f1       	breq	.+84     	; 0x10d0 <Dio_GetPinValue+0x9a>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	91 05       	cpc	r25, r1
    1084:	b9 f1       	breq	.+110    	; 0x10f4 <Dio_GetPinValue+0xbe>
    1086:	47 c0       	rjmp	.+142    	; 0x1116 <Dio_GetPinValue+0xe0>
	{
	case GroupA: ret_value=get_bit(PINA, PinNo); break;
    1088:	e9 e3       	ldi	r30, 0x39	; 57
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a9 01       	movw	r20, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <Dio_GetPinValue+0x6a>
    109c:	55 95       	asr	r21
    109e:	47 95       	ror	r20
    10a0:	8a 95       	dec	r24
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <Dio_GetPinValue+0x66>
    10a4:	ca 01       	movw	r24, r20
    10a6:	81 70       	andi	r24, 0x01	; 1
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	35 c0       	rjmp	.+106    	; 0x1116 <Dio_GetPinValue+0xe0>
	case GroupB: ret_value=get_bit(PINB, PinNo); break;
    10ac:	e6 e3       	ldi	r30, 0x36	; 54
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a9 01       	movw	r20, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <Dio_GetPinValue+0x8e>
    10c0:	55 95       	asr	r21
    10c2:	47 95       	ror	r20
    10c4:	8a 95       	dec	r24
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <Dio_GetPinValue+0x8a>
    10c8:	ca 01       	movw	r24, r20
    10ca:	81 70       	andi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	23 c0       	rjmp	.+70     	; 0x1116 <Dio_GetPinValue+0xe0>
	case GroupC: ret_value=get_bit(PINC, PinNo); break;
    10d0:	e3 e3       	ldi	r30, 0x33	; 51
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <Dio_GetPinValue+0xb2>
    10e4:	55 95       	asr	r21
    10e6:	47 95       	ror	r20
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <Dio_GetPinValue+0xae>
    10ec:	ca 01       	movw	r24, r20
    10ee:	81 70       	andi	r24, 0x01	; 1
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	11 c0       	rjmp	.+34     	; 0x1116 <Dio_GetPinValue+0xe0>
	case GroupD: ret_value=get_bit(PIND, PinNo); break;
    10f4:	e0 e3       	ldi	r30, 0x30	; 48
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a9 01       	movw	r20, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <Dio_GetPinValue+0xd6>
    1108:	55 95       	asr	r21
    110a:	47 95       	ror	r20
    110c:	8a 95       	dec	r24
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <Dio_GetPinValue+0xd2>
    1110:	ca 01       	movw	r24, r20
    1112:	81 70       	andi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01
	}

return ret_value;
    1116:	89 81       	ldd	r24, Y+1	; 0x01
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <Dio_SetPortDirection>:
void Dio_SetPortDirection(u8 GroupNo, u8 Direction)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <Dio_SetPortDirection+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <Dio_SetPortDirection+0x8>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <Dio_SetPortDirection+0xa>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	6a 83       	std	Y+2, r22	; 0x02
	if((GroupNo<=GroupD))
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	84 30       	cpi	r24, 0x04	; 4
    113e:	08 f0       	brcs	.+2      	; 0x1142 <Dio_SetPortDirection+0x1a>
    1140:	66 c0       	rjmp	.+204    	; 0x120e <Dio_SetPortDirection+0xe6>
		{
		if(Direction==INPUT)
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	88 23       	and	r24, r24
    1146:	71 f5       	brne	.+92     	; 0x11a4 <Dio_SetPortDirection+0x7c>
		{
			switch(GroupNo)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3e 83       	std	Y+6, r19	; 0x06
    1150:	2d 83       	std	Y+5, r18	; 0x05
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	c9 f0       	breq	.+50     	; 0x118e <Dio_SetPortDirection+0x66>
    115c:	2d 81       	ldd	r18, Y+5	; 0x05
    115e:	3e 81       	ldd	r19, Y+6	; 0x06
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <Dio_SetPortDirection+0x48>
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f0       	breq	.+24     	; 0x1186 <Dio_SetPortDirection+0x5e>
    116e:	1a c0       	rjmp	.+52     	; 0x11a4 <Dio_SetPortDirection+0x7c>
    1170:	2d 81       	ldd	r18, Y+5	; 0x05
    1172:	3e 81       	ldd	r19, Y+6	; 0x06
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	71 f0       	breq	.+28     	; 0x1196 <Dio_SetPortDirection+0x6e>
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	69 f0       	breq	.+26     	; 0x119e <Dio_SetPortDirection+0x76>
    1184:	0f c0       	rjmp	.+30     	; 0x11a4 <Dio_SetPortDirection+0x7c>
			{
			case GroupA: DDRA=0x00; break;
    1186:	ea e3       	ldi	r30, 0x3A	; 58
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	10 82       	st	Z, r1
    118c:	0b c0       	rjmp	.+22     	; 0x11a4 <Dio_SetPortDirection+0x7c>
			case GroupB: DDRB=0x00; break;
    118e:	e7 e3       	ldi	r30, 0x37	; 55
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	10 82       	st	Z, r1
    1194:	07 c0       	rjmp	.+14     	; 0x11a4 <Dio_SetPortDirection+0x7c>
			case GroupC: DDRC=0x00; break;
    1196:	e4 e3       	ldi	r30, 0x34	; 52
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	10 82       	st	Z, r1
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <Dio_SetPortDirection+0x7c>
			case GroupD: DDRD=0x00; break;
    119e:	e1 e3       	ldi	r30, 0x31	; 49
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	10 82       	st	Z, r1
			}
		}
		if(Direction==OUTPUT)
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	91 f5       	brne	.+100    	; 0x120e <Dio_SetPortDirection+0xe6>
		{
			switch(GroupNo)
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3c 83       	std	Y+4, r19	; 0x04
    11b2:	2b 83       	std	Y+3, r18	; 0x03
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	91 05       	cpc	r25, r1
    11bc:	d1 f0       	breq	.+52     	; 0x11f2 <Dio_SetPortDirection+0xca>
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	2c f4       	brge	.+10     	; 0x11d2 <Dio_SetPortDirection+0xaa>
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	61 f0       	breq	.+24     	; 0x11e8 <Dio_SetPortDirection+0xc0>
    11d0:	1e c0       	rjmp	.+60     	; 0x120e <Dio_SetPortDirection+0xe6>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	81 f0       	breq	.+32     	; 0x11fc <Dio_SetPortDirection+0xd4>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	91 05       	cpc	r25, r1
    11e4:	81 f0       	breq	.+32     	; 0x1206 <Dio_SetPortDirection+0xde>
    11e6:	13 c0       	rjmp	.+38     	; 0x120e <Dio_SetPortDirection+0xe6>
			{
			case GroupA: DDRA=0xff; break;
    11e8:	ea e3       	ldi	r30, 0x3A	; 58
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	80 83       	st	Z, r24
    11f0:	0e c0       	rjmp	.+28     	; 0x120e <Dio_SetPortDirection+0xe6>
			case GroupB: DDRB=0xff; break;
    11f2:	e7 e3       	ldi	r30, 0x37	; 55
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	80 83       	st	Z, r24
    11fa:	09 c0       	rjmp	.+18     	; 0x120e <Dio_SetPortDirection+0xe6>
			case GroupC: DDRC=0xff; break;
    11fc:	e4 e3       	ldi	r30, 0x34	; 52
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	80 83       	st	Z, r24
    1204:	04 c0       	rjmp	.+8      	; 0x120e <Dio_SetPortDirection+0xe6>
			case GroupD: DDRD=0xff; break;
    1206:	e1 e3       	ldi	r30, 0x31	; 49
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	80 83       	st	Z, r24
		}
		else
		{
			//not reachable
		}
}
    120e:	26 96       	adiw	r28, 0x06	; 6
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <Dio_SetPortValue>:
void Dio_SetPortValue(u8 GroupNo, u8 Value)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <Dio_SetPortValue+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <Dio_SetPortValue+0x8>
    1228:	00 d0       	rcall	.+0      	; 0x122a <Dio_SetPortValue+0xa>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	6a 83       	std	Y+2, r22	; 0x02
	if(Value==LOW)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	88 23       	and	r24, r24
    1236:	79 f5       	brne	.+94     	; 0x1296 <Dio_SetPortValue+0x76>
			{
				switch(GroupNo)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3e 83       	std	Y+6, r19	; 0x06
    1240:	2d 83       	std	Y+5, r18	; 0x05
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	c9 f0       	breq	.+50     	; 0x127e <Dio_SetPortValue+0x5e>
    124c:	2d 81       	ldd	r18, Y+5	; 0x05
    124e:	3e 81       	ldd	r19, Y+6	; 0x06
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <Dio_SetPortValue+0x40>
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	61 f0       	breq	.+24     	; 0x1276 <Dio_SetPortValue+0x56>
    125e:	4d c0       	rjmp	.+154    	; 0x12fa <Dio_SetPortValue+0xda>
    1260:	2d 81       	ldd	r18, Y+5	; 0x05
    1262:	3e 81       	ldd	r19, Y+6	; 0x06
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	71 f0       	breq	.+28     	; 0x1286 <Dio_SetPortValue+0x66>
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	69 f0       	breq	.+26     	; 0x128e <Dio_SetPortValue+0x6e>
    1274:	42 c0       	rjmp	.+132    	; 0x12fa <Dio_SetPortValue+0xda>
				{
				case GroupA: PORTA=0x00; break;
    1276:	eb e3       	ldi	r30, 0x3B	; 59
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	10 82       	st	Z, r1
    127c:	3e c0       	rjmp	.+124    	; 0x12fa <Dio_SetPortValue+0xda>
				case GroupB: PORTB=0x00; break;
    127e:	e8 e3       	ldi	r30, 0x38	; 56
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	10 82       	st	Z, r1
    1284:	3a c0       	rjmp	.+116    	; 0x12fa <Dio_SetPortValue+0xda>
				case GroupC: PORTC=0x00; break;
    1286:	e5 e3       	ldi	r30, 0x35	; 53
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	10 82       	st	Z, r1
    128c:	36 c0       	rjmp	.+108    	; 0x12fa <Dio_SetPortValue+0xda>
				case GroupD: PORTD=0x00; break;
    128e:	e2 e3       	ldi	r30, 0x32	; 50
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	10 82       	st	Z, r1
    1294:	32 c0       	rjmp	.+100    	; 0x12fa <Dio_SetPortValue+0xda>
				}
			}

			else
				{
				switch(GroupNo)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	3c 83       	std	Y+4, r19	; 0x04
    129e:	2b 83       	std	Y+3, r18	; 0x03
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	91 05       	cpc	r25, r1
    12a8:	d1 f0       	breq	.+52     	; 0x12de <Dio_SetPortValue+0xbe>
    12aa:	2b 81       	ldd	r18, Y+3	; 0x03
    12ac:	3c 81       	ldd	r19, Y+4	; 0x04
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	2c f4       	brge	.+10     	; 0x12be <Dio_SetPortValue+0x9e>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <Dio_SetPortValue+0xb4>
    12bc:	1e c0       	rjmp	.+60     	; 0x12fa <Dio_SetPortValue+0xda>
    12be:	2b 81       	ldd	r18, Y+3	; 0x03
    12c0:	3c 81       	ldd	r19, Y+4	; 0x04
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	81 f0       	breq	.+32     	; 0x12e8 <Dio_SetPortValue+0xc8>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	91 05       	cpc	r25, r1
    12d0:	81 f0       	breq	.+32     	; 0x12f2 <Dio_SetPortValue+0xd2>
    12d2:	13 c0       	rjmp	.+38     	; 0x12fa <Dio_SetPortValue+0xda>
				{
				case GroupA: PORTA=Value; break;
    12d4:	eb e3       	ldi	r30, 0x3B	; 59
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	80 83       	st	Z, r24
    12dc:	0e c0       	rjmp	.+28     	; 0x12fa <Dio_SetPortValue+0xda>
				case GroupB: PORTB=Value; break;
    12de:	e8 e3       	ldi	r30, 0x38	; 56
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	80 83       	st	Z, r24
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <Dio_SetPortValue+0xda>
				case GroupC: PORTC=Value; break;
    12e8:	e5 e3       	ldi	r30, 0x35	; 53
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	80 83       	st	Z, r24
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <Dio_SetPortValue+0xda>
				case GroupD: PORTD=Value; break;
    12f2:	e2 e3       	ldi	r30, 0x32	; 50
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 83       	st	Z, r24
				}
				}
}
    12fa:	26 96       	adiw	r28, 0x06	; 6
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <EEPROM_int>:
#include "LCD_int.h"
#include "EEPROM_int.h"
#include <avr/delay.h>

void EEPROM_int(void)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	2e 97       	sbiw	r28, 0x0e	; 14
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
	I2C_InitMaster();
    1320:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <I2C_InitMaster>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a8 ec       	ldi	r26, 0xC8	; 200
    132a:	b2 e4       	ldi	r27, 0x42	; 66
    132c:	8b 87       	std	Y+11, r24	; 0x0b
    132e:	9c 87       	std	Y+12, r25	; 0x0c
    1330:	ad 87       	std	Y+13, r26	; 0x0d
    1332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1334:	6b 85       	ldd	r22, Y+11	; 0x0b
    1336:	7c 85       	ldd	r23, Y+12	; 0x0c
    1338:	8d 85       	ldd	r24, Y+13	; 0x0d
    133a:	9e 85       	ldd	r25, Y+14	; 0x0e
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	4a e7       	ldi	r20, 0x7A	; 122
    1342:	55 e4       	ldi	r21, 0x45	; 69
    1344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	8f 83       	std	Y+7, r24	; 0x07
    134e:	98 87       	std	Y+8, r25	; 0x08
    1350:	a9 87       	std	Y+9, r26	; 0x09
    1352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1354:	6f 81       	ldd	r22, Y+7	; 0x07
    1356:	78 85       	ldd	r23, Y+8	; 0x08
    1358:	89 85       	ldd	r24, Y+9	; 0x09
    135a:	9a 85       	ldd	r25, Y+10	; 0x0a
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	5f e3       	ldi	r21, 0x3F	; 63
    1364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1368:	88 23       	and	r24, r24
    136a:	2c f4       	brge	.+10     	; 0x1376 <EEPROM_int+0x6a>
		__ticks = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9e 83       	std	Y+6, r25	; 0x06
    1372:	8d 83       	std	Y+5, r24	; 0x05
    1374:	3f c0       	rjmp	.+126    	; 0x13f4 <EEPROM_int+0xe8>
	else if (__tmp > 65535)
    1376:	6f 81       	ldd	r22, Y+7	; 0x07
    1378:	78 85       	ldd	r23, Y+8	; 0x08
    137a:	89 85       	ldd	r24, Y+9	; 0x09
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	3f ef       	ldi	r19, 0xFF	; 255
    1382:	4f e7       	ldi	r20, 0x7F	; 127
    1384:	57 e4       	ldi	r21, 0x47	; 71
    1386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138a:	18 16       	cp	r1, r24
    138c:	4c f5       	brge	.+82     	; 0x13e0 <EEPROM_int+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1390:	7c 85       	ldd	r23, Y+12	; 0x0c
    1392:	8d 85       	ldd	r24, Y+13	; 0x0d
    1394:	9e 85       	ldd	r25, Y+14	; 0x0e
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e2       	ldi	r20, 0x20	; 32
    139c:	51 e4       	ldi	r21, 0x41	; 65
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9e 83       	std	Y+6, r25	; 0x06
    13b4:	8d 83       	std	Y+5, r24	; 0x05
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <EEPROM_int+0xca>
    13b8:	80 e9       	ldi	r24, 0x90	; 144
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <EEPROM_int+0xb8>
    13c8:	9c 83       	std	Y+4, r25	; 0x04
    13ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <EEPROM_int+0xac>
    13de:	14 c0       	rjmp	.+40     	; 0x1408 <EEPROM_int+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e0:	6f 81       	ldd	r22, Y+7	; 0x07
    13e2:	78 85       	ldd	r23, Y+8	; 0x08
    13e4:	89 85       	ldd	r24, Y+9	; 0x09
    13e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	8d 83       	std	Y+5, r24	; 0x05
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <EEPROM_int+0xf4>
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    1408:	2e 96       	adiw	r28, 0x0e	; 14
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <EEPROM_WriteData>:
void EEPROM_WriteData(u8 address_inBlock,u8 Data)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <EEPROM_WriteData+0x6>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	6a 83       	std	Y+2, r22	; 0x02
	I2C_start();
    1428:	0e 94 56 0d 	call	0x1aac	; 0x1aac <I2C_start>

	I2C_SendSlaveAddress_Write(0xa0);
    142c:	80 ea       	ldi	r24, 0xA0	; 160
    142e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <I2C_SendSlaveAddress_Write>
	I2C_WriteByte(address_inBlock);
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <I2C_WriteByte>
	I2C_WriteByte(Data);
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <I2C_WriteByte>
	I2C_stop();
    143e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <I2C_stop>
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <EEPROM_ReadData>:
u8 EEPROM_ReadData(u8 address_inBlock)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <EEPROM_ReadData+0x6>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	8a 83       	std	Y+2, r24	; 0x02
	u8 Data=0;
    1458:	19 82       	std	Y+1, r1	; 0x01
	I2C_start();
    145a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <I2C_start>
	I2C_SendSlaveAddress_Write(0xa0);
    145e:	80 ea       	ldi	r24, 0xA0	; 160
    1460:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <I2C_SendSlaveAddress_Write>
	I2C_WriteByte(address_inBlock);
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <I2C_WriteByte>
	I2C_stop();
    146a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <I2C_stop>
	I2C_start();
    146e:	0e 94 56 0d 	call	0x1aac	; 0x1aac <I2C_start>
	I2C_SendSlaveAddress_Read(0xa1);
    1472:	81 ea       	ldi	r24, 0xA1	; 161
    1474:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <I2C_SendSlaveAddress_Read>
	Data=I2C_ReadByte();
    1478:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <I2C_ReadByte>
    147c:	89 83       	std	Y+1, r24	; 0x01
	I2C_stop();
    147e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <I2C_stop>
	return Data;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <EEPROM_WriteArray>:
void EEPROM_WriteArray(u8 address_inBlock,u8 * Data)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	ae 97       	sbiw	r28, 0x2e	; 46
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	8c a7       	std	Y+44, r24	; 0x2c
    14a4:	7e a7       	std	Y+46, r23	; 0x2e
    14a6:	6d a7       	std	Y+45, r22	; 0x2d
	u8 i = 0;
    14a8:	1b a6       	std	Y+43, r1	; 0x2b
	I2C_start();
    14aa:	0e 94 56 0d 	call	0x1aac	; 0x1aac <I2C_start>
	I2C_SendSlaveAddress_Write(0xa0);
    14ae:	80 ea       	ldi	r24, 0xA0	; 160
    14b0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <I2C_SendSlaveAddress_Write>
	I2C_WriteByte(address_inBlock);
    14b4:	8c a5       	ldd	r24, Y+44	; 0x2c
    14b6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <I2C_WriteByte>
    14ba:	80 c0       	rjmp	.+256    	; 0x15bc <EEPROM_WriteArray+0x12e>
	while(Data[i] != '\0')
	{
		I2C_WriteByte(Data[i]);
    14bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    14c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    14c6:	fc 01       	movw	r30, r24
    14c8:	e2 0f       	add	r30, r18
    14ca:	f3 1f       	adc	r31, r19
    14cc:	80 81       	ld	r24, Z
    14ce:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <I2C_WriteByte>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a8 ec       	ldi	r26, 0xC8	; 200
    14d8:	b2 e4       	ldi	r27, 0x42	; 66
    14da:	8f a3       	std	Y+39, r24	; 0x27
    14dc:	98 a7       	std	Y+40, r25	; 0x28
    14de:	a9 a7       	std	Y+41, r26	; 0x29
    14e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e2:	6f a1       	ldd	r22, Y+39	; 0x27
    14e4:	78 a5       	ldd	r23, Y+40	; 0x28
    14e6:	89 a5       	ldd	r24, Y+41	; 0x29
    14e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	4a e7       	ldi	r20, 0x7A	; 122
    14f0:	55 e4       	ldi	r21, 0x45	; 69
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	8b a3       	std	Y+35, r24	; 0x23
    14fc:	9c a3       	std	Y+36, r25	; 0x24
    14fe:	ad a3       	std	Y+37, r26	; 0x25
    1500:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1502:	6b a1       	ldd	r22, Y+35	; 0x23
    1504:	7c a1       	ldd	r23, Y+36	; 0x24
    1506:	8d a1       	ldd	r24, Y+37	; 0x25
    1508:	9e a1       	ldd	r25, Y+38	; 0x26
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1516:	88 23       	and	r24, r24
    1518:	2c f4       	brge	.+10     	; 0x1524 <EEPROM_WriteArray+0x96>
		__ticks = 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9a a3       	std	Y+34, r25	; 0x22
    1520:	89 a3       	std	Y+33, r24	; 0x21
    1522:	3f c0       	rjmp	.+126    	; 0x15a2 <EEPROM_WriteArray+0x114>
	else if (__tmp > 65535)
    1524:	6b a1       	ldd	r22, Y+35	; 0x23
    1526:	7c a1       	ldd	r23, Y+36	; 0x24
    1528:	8d a1       	ldd	r24, Y+37	; 0x25
    152a:	9e a1       	ldd	r25, Y+38	; 0x26
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	3f ef       	ldi	r19, 0xFF	; 255
    1530:	4f e7       	ldi	r20, 0x7F	; 127
    1532:	57 e4       	ldi	r21, 0x47	; 71
    1534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1538:	18 16       	cp	r1, r24
    153a:	4c f5       	brge	.+82     	; 0x158e <EEPROM_WriteArray+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153c:	6f a1       	ldd	r22, Y+39	; 0x27
    153e:	78 a5       	ldd	r23, Y+40	; 0x28
    1540:	89 a5       	ldd	r24, Y+41	; 0x29
    1542:	9a a5       	ldd	r25, Y+42	; 0x2a
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9a a3       	std	Y+34, r25	; 0x22
    1562:	89 a3       	std	Y+33, r24	; 0x21
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <EEPROM_WriteArray+0xf6>
    1566:	80 e9       	ldi	r24, 0x90	; 144
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	98 a3       	std	Y+32, r25	; 0x20
    156c:	8f 8f       	std	Y+31, r24	; 0x1f
    156e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1570:	98 a1       	ldd	r25, Y+32	; 0x20
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <EEPROM_WriteArray+0xe4>
    1576:	98 a3       	std	Y+32, r25	; 0x20
    1578:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157a:	89 a1       	ldd	r24, Y+33	; 0x21
    157c:	9a a1       	ldd	r25, Y+34	; 0x22
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	9a a3       	std	Y+34, r25	; 0x22
    1582:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1584:	89 a1       	ldd	r24, Y+33	; 0x21
    1586:	9a a1       	ldd	r25, Y+34	; 0x22
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	69 f7       	brne	.-38     	; 0x1566 <EEPROM_WriteArray+0xd8>
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <EEPROM_WriteArray+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158e:	6b a1       	ldd	r22, Y+35	; 0x23
    1590:	7c a1       	ldd	r23, Y+36	; 0x24
    1592:	8d a1       	ldd	r24, Y+37	; 0x25
    1594:	9e a1       	ldd	r25, Y+38	; 0x26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9a a3       	std	Y+34, r25	; 0x22
    15a0:	89 a3       	std	Y+33, r24	; 0x21
    15a2:	89 a1       	ldd	r24, Y+33	; 0x21
    15a4:	9a a1       	ldd	r25, Y+34	; 0x22
    15a6:	9e 8f       	std	Y+30, r25	; 0x1e
    15a8:	8d 8f       	std	Y+29, r24	; 0x1d
    15aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <EEPROM_WriteArray+0x120>
    15b2:	9e 8f       	std	Y+30, r25	; 0x1e
    15b4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		i++;
    15b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	8b a7       	std	Y+43, r24	; 0x2b
{
	u8 i = 0;
	I2C_start();
	I2C_SendSlaveAddress_Write(0xa0);
	I2C_WriteByte(address_inBlock);
	while(Data[i] != '\0')
    15bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    15c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    15c6:	fc 01       	movw	r30, r24
    15c8:	e2 0f       	add	r30, r18
    15ca:	f3 1f       	adc	r31, r19
    15cc:	80 81       	ld	r24, Z
    15ce:	88 23       	and	r24, r24
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <EEPROM_WriteArray+0x146>
    15d2:	74 cf       	rjmp	.-280    	; 0x14bc <EEPROM_WriteArray+0x2e>
	{
		I2C_WriteByte(Data[i]);
		_delay_ms(100);
		i++;
	}
	I2C_WriteByte('\0');
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <I2C_WriteByte>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a8 ec       	ldi	r26, 0xC8	; 200
    15e0:	b2 e4       	ldi	r27, 0x42	; 66
    15e2:	89 8f       	std	Y+25, r24	; 0x19
    15e4:	9a 8f       	std	Y+26, r25	; 0x1a
    15e6:	ab 8f       	std	Y+27, r26	; 0x1b
    15e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ea:	69 8d       	ldd	r22, Y+25	; 0x19
    15ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4a e7       	ldi	r20, 0x7A	; 122
    15f8:	55 e4       	ldi	r21, 0x45	; 69
    15fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	8d 8b       	std	Y+21, r24	; 0x15
    1604:	9e 8b       	std	Y+22, r25	; 0x16
    1606:	af 8b       	std	Y+23, r26	; 0x17
    1608:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    160a:	6d 89       	ldd	r22, Y+21	; 0x15
    160c:	7e 89       	ldd	r23, Y+22	; 0x16
    160e:	8f 89       	ldd	r24, Y+23	; 0x17
    1610:	98 8d       	ldd	r25, Y+24	; 0x18
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	5f e3       	ldi	r21, 0x3F	; 63
    161a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161e:	88 23       	and	r24, r24
    1620:	2c f4       	brge	.+10     	; 0x162c <EEPROM_WriteArray+0x19e>
		__ticks = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9c 8b       	std	Y+20, r25	; 0x14
    1628:	8b 8b       	std	Y+19, r24	; 0x13
    162a:	3f c0       	rjmp	.+126    	; 0x16aa <EEPROM_WriteArray+0x21c>
	else if (__tmp > 65535)
    162c:	6d 89       	ldd	r22, Y+21	; 0x15
    162e:	7e 89       	ldd	r23, Y+22	; 0x16
    1630:	8f 89       	ldd	r24, Y+23	; 0x17
    1632:	98 8d       	ldd	r25, Y+24	; 0x18
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	3f ef       	ldi	r19, 0xFF	; 255
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	57 e4       	ldi	r21, 0x47	; 71
    163c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1640:	18 16       	cp	r1, r24
    1642:	4c f5       	brge	.+82     	; 0x1696 <EEPROM_WriteArray+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1644:	69 8d       	ldd	r22, Y+25	; 0x19
    1646:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1648:	8b 8d       	ldd	r24, Y+27	; 0x1b
    164a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e2       	ldi	r20, 0x20	; 32
    1652:	51 e4       	ldi	r21, 0x41	; 65
    1654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9c 8b       	std	Y+20, r25	; 0x14
    166a:	8b 8b       	std	Y+19, r24	; 0x13
    166c:	0f c0       	rjmp	.+30     	; 0x168c <EEPROM_WriteArray+0x1fe>
    166e:	80 e9       	ldi	r24, 0x90	; 144
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	9a 8b       	std	Y+18, r25	; 0x12
    1674:	89 8b       	std	Y+17, r24	; 0x11
    1676:	89 89       	ldd	r24, Y+17	; 0x11
    1678:	9a 89       	ldd	r25, Y+18	; 0x12
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <EEPROM_WriteArray+0x1ec>
    167e:	9a 8b       	std	Y+18, r25	; 0x12
    1680:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1682:	8b 89       	ldd	r24, Y+19	; 0x13
    1684:	9c 89       	ldd	r25, Y+20	; 0x14
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	9c 8b       	std	Y+20, r25	; 0x14
    168a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168c:	8b 89       	ldd	r24, Y+19	; 0x13
    168e:	9c 89       	ldd	r25, Y+20	; 0x14
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	69 f7       	brne	.-38     	; 0x166e <EEPROM_WriteArray+0x1e0>
    1694:	14 c0       	rjmp	.+40     	; 0x16be <EEPROM_WriteArray+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1696:	6d 89       	ldd	r22, Y+21	; 0x15
    1698:	7e 89       	ldd	r23, Y+22	; 0x16
    169a:	8f 89       	ldd	r24, Y+23	; 0x17
    169c:	98 8d       	ldd	r25, Y+24	; 0x18
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	9c 8b       	std	Y+20, r25	; 0x14
    16a8:	8b 8b       	std	Y+19, r24	; 0x13
    16aa:	8b 89       	ldd	r24, Y+19	; 0x13
    16ac:	9c 89       	ldd	r25, Y+20	; 0x14
    16ae:	98 8b       	std	Y+16, r25	; 0x10
    16b0:	8f 87       	std	Y+15, r24	; 0x0f
    16b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b4:	98 89       	ldd	r25, Y+16	; 0x10
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <EEPROM_WriteArray+0x228>
    16ba:	98 8b       	std	Y+16, r25	; 0x10
    16bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	I2C_stop();
    16be:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <I2C_stop>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	a8 ec       	ldi	r26, 0xC8	; 200
    16c8:	b2 e4       	ldi	r27, 0x42	; 66
    16ca:	8b 87       	std	Y+11, r24	; 0x0b
    16cc:	9c 87       	std	Y+12, r25	; 0x0c
    16ce:	ad 87       	std	Y+13, r26	; 0x0d
    16d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	4a e7       	ldi	r20, 0x7A	; 122
    16e0:	55 e4       	ldi	r21, 0x45	; 69
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	8f 83       	std	Y+7, r24	; 0x07
    16ec:	98 87       	std	Y+8, r25	; 0x08
    16ee:	a9 87       	std	Y+9, r26	; 0x09
    16f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16f2:	6f 81       	ldd	r22, Y+7	; 0x07
    16f4:	78 85       	ldd	r23, Y+8	; 0x08
    16f6:	89 85       	ldd	r24, Y+9	; 0x09
    16f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e8       	ldi	r20, 0x80	; 128
    1700:	5f e3       	ldi	r21, 0x3F	; 63
    1702:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1706:	88 23       	and	r24, r24
    1708:	2c f4       	brge	.+10     	; 0x1714 <EEPROM_WriteArray+0x286>
		__ticks = 1;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	3f c0       	rjmp	.+126    	; 0x1792 <EEPROM_WriteArray+0x304>
	else if (__tmp > 65535)
    1714:	6f 81       	ldd	r22, Y+7	; 0x07
    1716:	78 85       	ldd	r23, Y+8	; 0x08
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	3f ef       	ldi	r19, 0xFF	; 255
    1720:	4f e7       	ldi	r20, 0x7F	; 127
    1722:	57 e4       	ldi	r21, 0x47	; 71
    1724:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1728:	18 16       	cp	r1, r24
    172a:	4c f5       	brge	.+82     	; 0x177e <EEPROM_WriteArray+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172c:	6b 85       	ldd	r22, Y+11	; 0x0b
    172e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1730:	8d 85       	ldd	r24, Y+13	; 0x0d
    1732:	9e 85       	ldd	r25, Y+14	; 0x0e
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e2       	ldi	r20, 0x20	; 32
    173a:	51 e4       	ldi	r21, 0x41	; 65
    173c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	0f c0       	rjmp	.+30     	; 0x1774 <EEPROM_WriteArray+0x2e6>
    1756:	80 e9       	ldi	r24, 0x90	; 144
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	9c 83       	std	Y+4, r25	; 0x04
    175c:	8b 83       	std	Y+3, r24	; 0x03
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <EEPROM_WriteArray+0x2d4>
    1766:	9c 83       	std	Y+4, r25	; 0x04
    1768:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	9e 81       	ldd	r25, Y+6	; 0x06
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	69 f7       	brne	.-38     	; 0x1756 <EEPROM_WriteArray+0x2c8>
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <EEPROM_WriteArray+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177e:	6f 81       	ldd	r22, Y+7	; 0x07
    1780:	78 85       	ldd	r23, Y+8	; 0x08
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	9e 81       	ldd	r25, Y+6	; 0x06
    1796:	9a 83       	std	Y+2, r25	; 0x02
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <EEPROM_WriteArray+0x310>
    17a2:	9a 83       	std	Y+2, r25	; 0x02
    17a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    17a6:	ae 96       	adiw	r28, 0x2e	; 46
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <EEPROM_ReadArray>:
void EEPROM_ReadArray(u8 address_inBlock , u8 * Data)
{
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	a0 97       	sbiw	r28, 0x20	; 32
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	8e 8f       	std	Y+30, r24	; 0x1e
    17d2:	78 a3       	std	Y+32, r23	; 0x20
    17d4:	6f 8f       	std	Y+31, r22	; 0x1f
	u8 i = 0;
    17d6:	1d 8e       	std	Y+29, r1	; 0x1d
	do
	{
		Data[i]=EEPROM_ReadData(address_inBlock+i);
    17d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17e0:	98 a1       	ldd	r25, Y+32	; 0x20
    17e2:	8c 01       	movw	r16, r24
    17e4:	02 0f       	add	r16, r18
    17e6:	13 1f       	adc	r17, r19
    17e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ec:	89 0f       	add	r24, r25
    17ee:	0e 94 26 0a 	call	0x144c	; 0x144c <EEPROM_ReadData>
    17f2:	f8 01       	movw	r30, r16
    17f4:	80 83       	st	Z, r24
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a8 e4       	ldi	r26, 0x48	; 72
    17fc:	b2 e4       	ldi	r27, 0x42	; 66
    17fe:	89 8f       	std	Y+25, r24	; 0x19
    1800:	9a 8f       	std	Y+26, r25	; 0x1a
    1802:	ab 8f       	std	Y+27, r26	; 0x1b
    1804:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	69 8d       	ldd	r22, Y+25	; 0x19
    1808:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a e7       	ldi	r20, 0x7A	; 122
    1814:	55 e4       	ldi	r21, 0x45	; 69
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8d 8b       	std	Y+21, r24	; 0x15
    1820:	9e 8b       	std	Y+22, r25	; 0x16
    1822:	af 8b       	std	Y+23, r26	; 0x17
    1824:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1826:	6d 89       	ldd	r22, Y+21	; 0x15
    1828:	7e 89       	ldd	r23, Y+22	; 0x16
    182a:	8f 89       	ldd	r24, Y+23	; 0x17
    182c:	98 8d       	ldd	r25, Y+24	; 0x18
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <EEPROM_ReadArray+0x90>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9c 8b       	std	Y+20, r25	; 0x14
    1844:	8b 8b       	std	Y+19, r24	; 0x13
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <EEPROM_ReadArray+0x10e>
	else if (__tmp > 65535)
    1848:	6d 89       	ldd	r22, Y+21	; 0x15
    184a:	7e 89       	ldd	r23, Y+22	; 0x16
    184c:	8f 89       	ldd	r24, Y+23	; 0x17
    184e:	98 8d       	ldd	r25, Y+24	; 0x18
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <EEPROM_ReadArray+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	69 8d       	ldd	r22, Y+25	; 0x19
    1862:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1864:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1866:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9c 8b       	std	Y+20, r25	; 0x14
    1886:	8b 8b       	std	Y+19, r24	; 0x13
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <EEPROM_ReadArray+0xf0>
    188a:	80 e9       	ldi	r24, 0x90	; 144
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	9a 8b       	std	Y+18, r25	; 0x12
    1890:	89 8b       	std	Y+17, r24	; 0x11
    1892:	89 89       	ldd	r24, Y+17	; 0x11
    1894:	9a 89       	ldd	r25, Y+18	; 0x12
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <EEPROM_ReadArray+0xde>
    189a:	9a 8b       	std	Y+18, r25	; 0x12
    189c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8b 89       	ldd	r24, Y+19	; 0x13
    18a0:	9c 89       	ldd	r25, Y+20	; 0x14
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9c 8b       	std	Y+20, r25	; 0x14
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8b 89       	ldd	r24, Y+19	; 0x13
    18aa:	9c 89       	ldd	r25, Y+20	; 0x14
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <EEPROM_ReadArray+0xd2>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <EEPROM_ReadArray+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6d 89       	ldd	r22, Y+21	; 0x15
    18b4:	7e 89       	ldd	r23, Y+22	; 0x16
    18b6:	8f 89       	ldd	r24, Y+23	; 0x17
    18b8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9c 8b       	std	Y+20, r25	; 0x14
    18c4:	8b 8b       	std	Y+19, r24	; 0x13
    18c6:	8b 89       	ldd	r24, Y+19	; 0x13
    18c8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ca:	98 8b       	std	Y+16, r25	; 0x10
    18cc:	8f 87       	std	Y+15, r24	; 0x0f
    18ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d0:	98 89       	ldd	r25, Y+16	; 0x10
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <EEPROM_ReadArray+0x11a>
    18d6:	98 8b       	std	Y+16, r25	; 0x10
    18d8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		i++;
    18da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18dc:	8f 5f       	subi	r24, 0xFF	; 255
    18de:	8d 8f       	std	Y+29, r24	; 0x1d
	}while(Data[i-1] != '\0');
    18e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9c 01       	movw	r18, r24
    18e8:	21 50       	subi	r18, 0x01	; 1
    18ea:	30 40       	sbci	r19, 0x00	; 0
    18ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ee:	98 a1       	ldd	r25, Y+32	; 0x20
    18f0:	fc 01       	movw	r30, r24
    18f2:	e2 0f       	add	r30, r18
    18f4:	f3 1f       	adc	r31, r19
    18f6:	80 81       	ld	r24, Z
    18f8:	88 23       	and	r24, r24
    18fa:	09 f0       	breq	.+2      	; 0x18fe <EEPROM_ReadArray+0x146>
    18fc:	6d cf       	rjmp	.-294    	; 0x17d8 <EEPROM_ReadArray+0x20>
	Data[i]='\0';
    18fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1906:	98 a1       	ldd	r25, Y+32	; 0x20
    1908:	fc 01       	movw	r30, r24
    190a:	e2 0f       	add	r30, r18
    190c:	f3 1f       	adc	r31, r19
    190e:	10 82       	st	Z, r1
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a8 e4       	ldi	r26, 0x48	; 72
    1916:	b2 e4       	ldi	r27, 0x42	; 66
    1918:	8b 87       	std	Y+11, r24	; 0x0b
    191a:	9c 87       	std	Y+12, r25	; 0x0c
    191c:	ad 87       	std	Y+13, r26	; 0x0d
    191e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1920:	6b 85       	ldd	r22, Y+11	; 0x0b
    1922:	7c 85       	ldd	r23, Y+12	; 0x0c
    1924:	8d 85       	ldd	r24, Y+13	; 0x0d
    1926:	9e 85       	ldd	r25, Y+14	; 0x0e
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	4a e7       	ldi	r20, 0x7A	; 122
    192e:	55 e4       	ldi	r21, 0x45	; 69
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	8f 83       	std	Y+7, r24	; 0x07
    193a:	98 87       	std	Y+8, r25	; 0x08
    193c:	a9 87       	std	Y+9, r26	; 0x09
    193e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1940:	6f 81       	ldd	r22, Y+7	; 0x07
    1942:	78 85       	ldd	r23, Y+8	; 0x08
    1944:	89 85       	ldd	r24, Y+9	; 0x09
    1946:	9a 85       	ldd	r25, Y+10	; 0x0a
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e8       	ldi	r20, 0x80	; 128
    194e:	5f e3       	ldi	r21, 0x3F	; 63
    1950:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1954:	88 23       	and	r24, r24
    1956:	2c f4       	brge	.+10     	; 0x1962 <EEPROM_ReadArray+0x1aa>
		__ticks = 1;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
    1960:	3f c0       	rjmp	.+126    	; 0x19e0 <EEPROM_ReadArray+0x228>
	else if (__tmp > 65535)
    1962:	6f 81       	ldd	r22, Y+7	; 0x07
    1964:	78 85       	ldd	r23, Y+8	; 0x08
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	4c f5       	brge	.+82     	; 0x19cc <EEPROM_ReadArray+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197a:	6b 85       	ldd	r22, Y+11	; 0x0b
    197c:	7c 85       	ldd	r23, Y+12	; 0x0c
    197e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1980:	9e 85       	ldd	r25, Y+14	; 0x0e
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e2       	ldi	r20, 0x20	; 32
    1988:	51 e4       	ldi	r21, 0x41	; 65
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
    19a2:	0f c0       	rjmp	.+30     	; 0x19c2 <EEPROM_ReadArray+0x20a>
    19a4:	80 e9       	ldi	r24, 0x90	; 144
    19a6:	91 e0       	ldi	r25, 0x01	; 1
    19a8:	9c 83       	std	Y+4, r25	; 0x04
    19aa:	8b 83       	std	Y+3, r24	; 0x03
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <EEPROM_ReadArray+0x1f8>
    19b4:	9c 83       	std	Y+4, r25	; 0x04
    19b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	9e 81       	ldd	r25, Y+6	; 0x06
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	69 f7       	brne	.-38     	; 0x19a4 <EEPROM_ReadArray+0x1ec>
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <EEPROM_ReadArray+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19cc:	6f 81       	ldd	r22, Y+7	; 0x07
    19ce:	78 85       	ldd	r23, Y+8	; 0x08
    19d0:	89 85       	ldd	r24, Y+9	; 0x09
    19d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <EEPROM_ReadArray+0x234>
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    19f4:	a0 96       	adiw	r28, 0x20	; 32
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	08 95       	ret

00001a0a <Clean_Array>:
void Clean_Array(u8 Array[])
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <Clean_Array+0x6>
    1a10:	0f 92       	push	r0
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	9b 83       	std	Y+3, r25	; 0x03
    1a18:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0 ; i<16 ;i++)
    1a1a:	19 82       	std	Y+1, r1	; 0x01
    1a1c:	0c c0       	rjmp	.+24     	; 0x1a36 <Clean_Array+0x2c>
		{
			Array[i]='\0';
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	9b 81       	ldd	r25, Y+3	; 0x03
    1a28:	fc 01       	movw	r30, r24
    1a2a:	e2 0f       	add	r30, r18
    1a2c:	f3 1f       	adc	r31, r19
    1a2e:	10 82       	st	Z, r1
	Data[i]='\0';
	_delay_ms(50);
}
void Clean_Array(u8 Array[])
{
	for(u8 i=0 ; i<16 ;i++)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	80 31       	cpi	r24, 0x10	; 16
    1a3a:	88 f3       	brcs	.-30     	; 0x1a1e <Clean_Array+0x14>
		{
			Array[i]='\0';
		}
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <I2C_InitMaster>:
#include "Dio_Reg.h"
#include "Dio_int.h"
#include "I2C_int.h"

void I2C_InitMaster(void)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	//Clock Factor
	TWBR=10;
    1a50:	e0 e2       	ldi	r30, 0x20	; 32
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	8a e0       	ldi	r24, 0x0A	; 10
    1a56:	80 83       	st	Z, r24

	//Prescaler
	clr_bit(TWSR,0);
    1a58:	a1 e2       	ldi	r26, 0x21	; 33
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e1 e2       	ldi	r30, 0x21	; 33
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8e 7f       	andi	r24, 0xFE	; 254
    1a64:	8c 93       	st	X, r24
	clr_bit(TWSR,1);
    1a66:	a1 e2       	ldi	r26, 0x21	; 33
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e1 e2       	ldi	r30, 0x21	; 33
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8d 7f       	andi	r24, 0xFD	; 253
    1a72:	8c 93       	st	X, r24

	//Enable ACK
	set_bit(TWCR,6);
    1a74:	a6 e5       	ldi	r26, 0x56	; 86
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e6 e5       	ldi	r30, 0x56	; 86
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 64       	ori	r24, 0x40	; 64
    1a80:	8c 93       	st	X, r24

}
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <I2C_InitSlave>:
void I2C_InitSlave(void)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
	//Set Slave Address
	TWAR=0x20;
    1a90:	e2 e2       	ldi	r30, 0x22	; 34
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 e2       	ldi	r24, 0x20	; 32
    1a96:	80 83       	st	Z, r24

	//Enable ACK
	set_bit(TWCR,6);
    1a98:	a6 e5       	ldi	r26, 0x56	; 86
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e6 e5       	ldi	r30, 0x56	; 86
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 64       	ori	r24, 0x40	; 64
    1aa4:	8c 93       	st	X, r24
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <I2C_start>:
void I2C_start(void)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
	//Clear Flag
	//START Condition
	//TWI Enable Bit
	TWCR = (1<<7)|(1<<5)|(1<<2);
    1ab4:	e6 e5       	ldi	r30, 0x56	; 86
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	84 ea       	ldi	r24, 0xA4	; 164
    1aba:	80 83       	st	Z, r24

	//Wait For Flage
	while(get_bit(TWCR,7)!=1);
    1abc:	e6 e5       	ldi	r30, 0x56	; 86
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	88 27       	eor	r24, r24
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	c1 f7       	brne	.-16     	; 0x1abc <I2C_start+0x10>

	//State start is ok
	while((TWSR & 0xF8)!=0x08);
    1acc:	e1 e2       	ldi	r30, 0x21	; 33
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	88 2f       	mov	r24, r24
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	88 7f       	andi	r24, 0xF8	; 248
    1ad8:	90 70       	andi	r25, 0x00	; 0
    1ada:	88 30       	cpi	r24, 0x08	; 8
    1adc:	91 05       	cpc	r25, r1
    1ade:	b1 f7       	brne	.-20     	; 0x1acc <I2C_start+0x20>
}
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <I2C_RepeatedStart>:

void I2C_RepeatedStart(void)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	//Clear Flag
	//START Condition
	//TWI Enable Bit
	TWCR = (1<<7)|(1<<5)|(1<<2);
    1aee:	e6 e5       	ldi	r30, 0x56	; 86
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	84 ea       	ldi	r24, 0xA4	; 164
    1af4:	80 83       	st	Z, r24

	//Wait For Flage
	while(get_bit(TWCR,7)!=1);
    1af6:	e6 e5       	ldi	r30, 0x56	; 86
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	88 1f       	adc	r24, r24
    1afe:	88 27       	eor	r24, r24
    1b00:	88 1f       	adc	r24, r24
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	c1 f7       	brne	.-16     	; 0x1af6 <I2C_RepeatedStart+0x10>

	//State Re_start is ok
	while((TWSR & 0xF8)!=0x10);
    1b06:	e1 e2       	ldi	r30, 0x21	; 33
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	88 7f       	andi	r24, 0xF8	; 248
    1b12:	90 70       	andi	r25, 0x00	; 0
    1b14:	80 31       	cpi	r24, 0x10	; 16
    1b16:	91 05       	cpc	r25, r1
    1b18:	b1 f7       	brne	.-20     	; 0x1b06 <I2C_RepeatedStart+0x20>
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <I2C_stop>:
void I2C_stop(void)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	//Clear Flag
	//STOP Condition
	//TWI Enable Bit
	TWCR = (1<<7)|(1<<2)|(1<<4);
    1b28:	e6 e5       	ldi	r30, 0x56	; 86
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	84 e9       	ldi	r24, 0x94	; 148
    1b2e:	80 83       	st	Z, r24
}
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <I2C_SendSlaveAddress_Write>:
void I2C_SendSlaveAddress_Write(u8 Slave_Address)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	0f 92       	push	r0
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	89 83       	std	Y+1, r24	; 0x01
	//Send Address for Slave to write to it
	TWDR=Slave_Address;
    1b42:	e3 e2       	ldi	r30, 0x23	; 35
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	80 83       	st	Z, r24

	//Clear Flag
	//TWI Enable Bit
	TWCR = (1<<7)|(1<<2);
    1b4a:	e6 e5       	ldi	r30, 0x56	; 86
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	84 e8       	ldi	r24, 0x84	; 132
    1b50:	80 83       	st	Z, r24

	//Wait For Flage
	while(get_bit(TWCR,7)!=1);
    1b52:	e6 e5       	ldi	r30, 0x56	; 86
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	88 1f       	adc	r24, r24
    1b5a:	88 27       	eor	r24, r24
    1b5c:	88 1f       	adc	r24, r24
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	c1 f7       	brne	.-16     	; 0x1b52 <I2C_SendSlaveAddress_Write+0x1c>

	//ACK Check
	while((TWSR & 0xF8)!=0x18);
    1b62:	e1 e2       	ldi	r30, 0x21	; 33
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	88 7f       	andi	r24, 0xF8	; 248
    1b6e:	90 70       	andi	r25, 0x00	; 0
    1b70:	88 31       	cpi	r24, 0x18	; 24
    1b72:	91 05       	cpc	r25, r1
    1b74:	b1 f7       	brne	.-20     	; 0x1b62 <I2C_SendSlaveAddress_Write+0x2c>
}
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <I2C_SendSlaveAddress_Read>:
void I2C_SendSlaveAddress_Read(u8 Slave_Address)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	0f 92       	push	r0
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	89 83       	std	Y+1, r24	; 0x01
	//Send Address for Slave to write to it
	TWDR=Slave_Address;
    1b8a:	e3 e2       	ldi	r30, 0x23	; 35
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	80 83       	st	Z, r24

	//Clear Flag
	//TWI Enable Bit
	TWCR = (1<<7)|(1<<2);
    1b92:	e6 e5       	ldi	r30, 0x56	; 86
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	84 e8       	ldi	r24, 0x84	; 132
    1b98:	80 83       	st	Z, r24

	//Wait For Flage
	while(get_bit(TWCR,7)!=1);
    1b9a:	e6 e5       	ldi	r30, 0x56	; 86
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	88 1f       	adc	r24, r24
    1ba2:	88 27       	eor	r24, r24
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	c1 f7       	brne	.-16     	; 0x1b9a <I2C_SendSlaveAddress_Read+0x1c>

	//ACK Check
	while((TWSR & 0xF8)!=0x40);
    1baa:	e1 e2       	ldi	r30, 0x21	; 33
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	88 7f       	andi	r24, 0xF8	; 248
    1bb6:	90 70       	andi	r25, 0x00	; 0
    1bb8:	80 34       	cpi	r24, 0x40	; 64
    1bba:	91 05       	cpc	r25, r1
    1bbc:	b1 f7       	brne	.-20     	; 0x1baa <I2C_SendSlaveAddress_Read+0x2c>
}
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <I2C_WriteByte>:
void I2C_WriteByte(u8 Data)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	//Load Data
	TWDR=Data;
    1bd2:	e3 e2       	ldi	r30, 0x23	; 35
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	80 83       	st	Z, r24

	//Clear Flag
	//TWI Enable Bit
	TWCR = (1<<7)|(1<<2);
    1bda:	e6 e5       	ldi	r30, 0x56	; 86
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	84 e8       	ldi	r24, 0x84	; 132
    1be0:	80 83       	st	Z, r24

	//Wait For Flage
	while(get_bit(TWCR,7)!=1);
    1be2:	e6 e5       	ldi	r30, 0x56	; 86
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	88 1f       	adc	r24, r24
    1bea:	88 27       	eor	r24, r24
    1bec:	88 1f       	adc	r24, r24
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	c1 f7       	brne	.-16     	; 0x1be2 <I2C_WriteByte+0x1c>

	//ACK Check
	while((TWSR & 0xF8)!=0x28);
    1bf2:	e1 e2       	ldi	r30, 0x21	; 33
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	88 7f       	andi	r24, 0xF8	; 248
    1bfe:	90 70       	andi	r25, 0x00	; 0
    1c00:	88 32       	cpi	r24, 0x28	; 40
    1c02:	91 05       	cpc	r25, r1
    1c04:	b1 f7       	brne	.-20     	; 0x1bf2 <I2C_WriteByte+0x2c>
}
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <I2C_ReadByte>:
u8 I2C_ReadByte(void)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
	//Clear Flag
	//TWI Enable Bit
	TWCR = (1<<7)|(1<<2);
    1c16:	e6 e5       	ldi	r30, 0x56	; 86
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	84 e8       	ldi	r24, 0x84	; 132
    1c1c:	80 83       	st	Z, r24

	//Wait For Flage
	while(get_bit(TWCR,7)!=1);
    1c1e:	e6 e5       	ldi	r30, 0x56	; 86
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	88 1f       	adc	r24, r24
    1c26:	88 27       	eor	r24, r24
    1c28:	88 1f       	adc	r24, r24
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	c1 f7       	brne	.-16     	; 0x1c1e <I2C_ReadByte+0x10>

	//ACK Check
	while((TWSR & 0xF8)!=0x58);
    1c2e:	e1 e2       	ldi	r30, 0x21	; 33
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	88 7f       	andi	r24, 0xF8	; 248
    1c3a:	90 70       	andi	r25, 0x00	; 0
    1c3c:	88 35       	cpi	r24, 0x58	; 88
    1c3e:	91 05       	cpc	r25, r1
    1c40:	b1 f7       	brne	.-20     	; 0x1c2e <I2C_ReadByte+0x20>

	//Get Data
	return TWDR;
    1c42:	e3 e2       	ldi	r30, 0x23	; 35
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
}
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <lcd_init>:
#include "DIO_Reg.h"
#include "Dio_Int.h"
#include"LCD_Int.h"
#include <avr/delay.h>

void lcd_init (void){
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	e8 97       	sbiw	r28, 0x38	; 56
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
	//control lines ____________________________________
	Dio_SetPinDirection(GroupB,PIN1,OUTPUT); // RS
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN2,OUTPUT); // R\W
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	62 e0       	ldi	r22, 0x02	; 2
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN3,OUTPUT); // enable
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	63 e0       	ldi	r22, 0x03	; 3
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>

	// Data lines _____________________________________
	Dio_SetPinDirection(GroupA,PIN4,OUTPUT); // A4
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	64 e0       	ldi	r22, 0x04	; 4
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,PIN5,OUTPUT); // A5
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	65 e0       	ldi	r22, 0x05	; 5
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,PIN6,OUTPUT); // A6
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	66 e0       	ldi	r22, 0x06	; 6
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,PIN7,OUTPUT); // A7
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	67 e0       	ldi	r22, 0x07	; 7
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a8 e4       	ldi	r26, 0x48	; 72
    1cae:	b2 e4       	ldi	r27, 0x42	; 66
    1cb0:	8d ab       	std	Y+53, r24	; 0x35
    1cb2:	9e ab       	std	Y+54, r25	; 0x36
    1cb4:	af ab       	std	Y+55, r26	; 0x37
    1cb6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cba:	7e a9       	ldd	r23, Y+54	; 0x36
    1cbc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cbe:	98 ad       	ldd	r25, Y+56	; 0x38
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	4a e7       	ldi	r20, 0x7A	; 122
    1cc6:	55 e4       	ldi	r21, 0x45	; 69
    1cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	89 ab       	std	Y+49, r24	; 0x31
    1cd2:	9a ab       	std	Y+50, r25	; 0x32
    1cd4:	ab ab       	std	Y+51, r26	; 0x33
    1cd6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cda:	7a a9       	ldd	r23, Y+50	; 0x32
    1cdc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cde:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e8       	ldi	r20, 0x80	; 128
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	2c f4       	brge	.+10     	; 0x1cfa <lcd_init+0xac>
		__ticks = 1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	98 ab       	std	Y+48, r25	; 0x30
    1cf6:	8f a7       	std	Y+47, r24	; 0x2f
    1cf8:	3f c0       	rjmp	.+126    	; 0x1d78 <lcd_init+0x12a>
	else if (__tmp > 65535)
    1cfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1cfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1d00:	9c a9       	ldd	r25, Y+52	; 0x34
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	3f ef       	ldi	r19, 0xFF	; 255
    1d06:	4f e7       	ldi	r20, 0x7F	; 127
    1d08:	57 e4       	ldi	r21, 0x47	; 71
    1d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d0e:	18 16       	cp	r1, r24
    1d10:	4c f5       	brge	.+82     	; 0x1d64 <lcd_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d12:	6d a9       	ldd	r22, Y+53	; 0x35
    1d14:	7e a9       	ldd	r23, Y+54	; 0x36
    1d16:	8f a9       	ldd	r24, Y+55	; 0x37
    1d18:	98 ad       	ldd	r25, Y+56	; 0x38
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e2       	ldi	r20, 0x20	; 32
    1d20:	51 e4       	ldi	r21, 0x41	; 65
    1d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	98 ab       	std	Y+48, r25	; 0x30
    1d38:	8f a7       	std	Y+47, r24	; 0x2f
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <lcd_init+0x10c>
    1d3c:	80 e9       	ldi	r24, 0x90	; 144
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	9e a7       	std	Y+46, r25	; 0x2e
    1d42:	8d a7       	std	Y+45, r24	; 0x2d
    1d44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <lcd_init+0xfa>
    1d4c:	9e a7       	std	Y+46, r25	; 0x2e
    1d4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d52:	98 a9       	ldd	r25, Y+48	; 0x30
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	98 ab       	std	Y+48, r25	; 0x30
    1d58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	69 f7       	brne	.-38     	; 0x1d3c <lcd_init+0xee>
    1d62:	14 c0       	rjmp	.+40     	; 0x1d8c <lcd_init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d64:	69 a9       	ldd	r22, Y+49	; 0x31
    1d66:	7a a9       	ldd	r23, Y+50	; 0x32
    1d68:	8b a9       	ldd	r24, Y+51	; 0x33
    1d6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	98 ab       	std	Y+48, r25	; 0x30
    1d76:	8f a7       	std	Y+47, r24	; 0x2f
    1d78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d7c:	9c a7       	std	Y+44, r25	; 0x2c
    1d7e:	8b a7       	std	Y+43, r24	; 0x2b
    1d80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <lcd_init+0x136>
    1d88:	9c a7       	std	Y+44, r25	; 0x2c
    1d8a:	8b a7       	std	Y+43, r24	; 0x2b

	//steps _______________
	_delay_ms(50);
	// function set
	lcd_write_command(0x02);
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
	lcd_write_command(0x2c);
    1d92:	8c e2       	ldi	r24, 0x2C	; 44
    1d94:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e8       	ldi	r26, 0x80	; 128
    1d9e:	bf e3       	ldi	r27, 0x3F	; 63
    1da0:	8f a3       	std	Y+39, r24	; 0x27
    1da2:	98 a7       	std	Y+40, r25	; 0x28
    1da4:	a9 a7       	std	Y+41, r26	; 0x29
    1da6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	6f a1       	ldd	r22, Y+39	; 0x27
    1daa:	78 a5       	ldd	r23, Y+40	; 0x28
    1dac:	89 a5       	ldd	r24, Y+41	; 0x29
    1dae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a e7       	ldi	r20, 0x7A	; 122
    1db6:	55 e4       	ldi	r21, 0x45	; 69
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8b a3       	std	Y+35, r24	; 0x23
    1dc2:	9c a3       	std	Y+36, r25	; 0x24
    1dc4:	ad a3       	std	Y+37, r26	; 0x25
    1dc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dca:	7c a1       	ldd	r23, Y+36	; 0x24
    1dcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dce:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <lcd_init+0x19c>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9a a3       	std	Y+34, r25	; 0x22
    1de6:	89 a3       	std	Y+33, r24	; 0x21
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <lcd_init+0x21a>
	else if (__tmp > 65535)
    1dea:	6b a1       	ldd	r22, Y+35	; 0x23
    1dec:	7c a1       	ldd	r23, Y+36	; 0x24
    1dee:	8d a1       	ldd	r24, Y+37	; 0x25
    1df0:	9e a1       	ldd	r25, Y+38	; 0x26
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <lcd_init+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	6f a1       	ldd	r22, Y+39	; 0x27
    1e04:	78 a5       	ldd	r23, Y+40	; 0x28
    1e06:	89 a5       	ldd	r24, Y+41	; 0x29
    1e08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9a a3       	std	Y+34, r25	; 0x22
    1e28:	89 a3       	std	Y+33, r24	; 0x21
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <lcd_init+0x1fc>
    1e2c:	80 e9       	ldi	r24, 0x90	; 144
    1e2e:	91 e0       	ldi	r25, 0x01	; 1
    1e30:	98 a3       	std	Y+32, r25	; 0x20
    1e32:	8f 8f       	std	Y+31, r24	; 0x1f
    1e34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e36:	98 a1       	ldd	r25, Y+32	; 0x20
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <lcd_init+0x1ea>
    1e3c:	98 a3       	std	Y+32, r25	; 0x20
    1e3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	89 a1       	ldd	r24, Y+33	; 0x21
    1e42:	9a a1       	ldd	r25, Y+34	; 0x22
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9a a3       	std	Y+34, r25	; 0x22
    1e48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <lcd_init+0x1de>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <lcd_init+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	6b a1       	ldd	r22, Y+35	; 0x23
    1e56:	7c a1       	ldd	r23, Y+36	; 0x24
    1e58:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9a a3       	std	Y+34, r25	; 0x22
    1e66:	89 a3       	std	Y+33, r24	; 0x21
    1e68:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e6e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <lcd_init+0x226>
    1e78:	9e 8f       	std	Y+30, r25	; 0x1e
    1e7a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	// display on\off control
	lcd_write_command(0x0c); // d=1 , c=1 , b=1
    1e7c:	8c e0       	ldi	r24, 0x0C	; 12
    1e7e:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a0 e8       	ldi	r26, 0x80	; 128
    1e88:	bf e3       	ldi	r27, 0x3F	; 63
    1e8a:	89 8f       	std	Y+25, r24	; 0x19
    1e8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e92:	69 8d       	ldd	r22, Y+25	; 0x19
    1e94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ea0:	55 e4       	ldi	r21, 0x45	; 69
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	8d 8b       	std	Y+21, r24	; 0x15
    1eac:	9e 8b       	std	Y+22, r25	; 0x16
    1eae:	af 8b       	std	Y+23, r26	; 0x17
    1eb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	2c f4       	brge	.+10     	; 0x1ed4 <lcd_init+0x286>
		__ticks = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9c 8b       	std	Y+20, r25	; 0x14
    1ed0:	8b 8b       	std	Y+19, r24	; 0x13
    1ed2:	3f c0       	rjmp	.+126    	; 0x1f52 <lcd_init+0x304>
	else if (__tmp > 65535)
    1ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eda:	98 8d       	ldd	r25, Y+24	; 0x18
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	3f ef       	ldi	r19, 0xFF	; 255
    1ee0:	4f e7       	ldi	r20, 0x7F	; 127
    1ee2:	57 e4       	ldi	r21, 0x47	; 71
    1ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee8:	18 16       	cp	r1, r24
    1eea:	4c f5       	brge	.+82     	; 0x1f3e <lcd_init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eec:	69 8d       	ldd	r22, Y+25	; 0x19
    1eee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ef0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ef2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e2       	ldi	r20, 0x20	; 32
    1efa:	51 e4       	ldi	r21, 0x41	; 65
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <lcd_init+0x2e6>
    1f16:	80 e9       	ldi	r24, 0x90	; 144
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	9a 8b       	std	Y+18, r25	; 0x12
    1f1c:	89 8b       	std	Y+17, r24	; 0x11
    1f1e:	89 89       	ldd	r24, Y+17	; 0x11
    1f20:	9a 89       	ldd	r25, Y+18	; 0x12
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <lcd_init+0x2d4>
    1f26:	9a 8b       	std	Y+18, r25	; 0x12
    1f28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	9c 8b       	std	Y+20, r25	; 0x14
    1f32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f34:	8b 89       	ldd	r24, Y+19	; 0x13
    1f36:	9c 89       	ldd	r25, Y+20	; 0x14
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	69 f7       	brne	.-38     	; 0x1f16 <lcd_init+0x2c8>
    1f3c:	14 c0       	rjmp	.+40     	; 0x1f66 <lcd_init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f40:	7e 89       	ldd	r23, Y+22	; 0x16
    1f42:	8f 89       	ldd	r24, Y+23	; 0x17
    1f44:	98 8d       	ldd	r25, Y+24	; 0x18
    1f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	9c 8b       	std	Y+20, r25	; 0x14
    1f50:	8b 8b       	std	Y+19, r24	; 0x13
    1f52:	8b 89       	ldd	r24, Y+19	; 0x13
    1f54:	9c 89       	ldd	r25, Y+20	; 0x14
    1f56:	98 8b       	std	Y+16, r25	; 0x10
    1f58:	8f 87       	std	Y+15, r24	; 0x0f
    1f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f5c:	98 89       	ldd	r25, Y+16	; 0x10
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <lcd_init+0x310>
    1f62:	98 8b       	std	Y+16, r25	; 0x10
    1f64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	// clear
	lcd_write_command(0x01);
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 e0       	ldi	r26, 0x00	; 0
    1f72:	b0 e4       	ldi	r27, 0x40	; 64
    1f74:	8b 87       	std	Y+11, r24	; 0x0b
    1f76:	9c 87       	std	Y+12, r25	; 0x0c
    1f78:	ad 87       	std	Y+13, r26	; 0x0d
    1f7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a e7       	ldi	r20, 0x7A	; 122
    1f8a:	55 e4       	ldi	r21, 0x45	; 69
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	8f 83       	std	Y+7, r24	; 0x07
    1f96:	98 87       	std	Y+8, r25	; 0x08
    1f98:	a9 87       	std	Y+9, r26	; 0x09
    1f9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9e:	78 85       	ldd	r23, Y+8	; 0x08
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <lcd_init+0x370>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <lcd_init+0x3ee>
	else if (__tmp > 65535)
    1fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc0:	78 85       	ldd	r23, Y+8	; 0x08
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	57 e4       	ldi	r21, 0x47	; 71
    1fce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f5       	brge	.+82     	; 0x2028 <lcd_init+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <lcd_init+0x3d0>
    2000:	80 e9       	ldi	r24, 0x90	; 144
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	9c 83       	std	Y+4, r25	; 0x04
    2006:	8b 83       	std	Y+3, r24	; 0x03
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <lcd_init+0x3be>
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	8d 81       	ldd	r24, Y+5	; 0x05
    2020:	9e 81       	ldd	r25, Y+6	; 0x06
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <lcd_init+0x3b2>
    2026:	14 c0       	rjmp	.+40     	; 0x2050 <lcd_init+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	6f 81       	ldd	r22, Y+7	; 0x07
    202a:	78 85       	ldd	r23, Y+8	; 0x08
    202c:	89 85       	ldd	r24, Y+9	; 0x09
    202e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
    203e:	9e 81       	ldd	r25, Y+6	; 0x06
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <lcd_init+0x3fa>
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	// entry mode set
	lcd_write_command(0x06);
    2050:	86 e0       	ldi	r24, 0x06	; 6
    2052:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>



}
    2056:	e8 96       	adiw	r28, 0x38	; 56
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <lcd_write_command>:

void lcd_write_command (u8 command){
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	6d 97       	sbiw	r28, 0x1d	; 29
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_SetPinValue(GroupB,PIN2,LOW); // R\W --> write
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	62 e0       	ldi	r22, 0x02	; 2
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
	Dio_SetPinValue(GroupB,PIN1,LOW); // RS --> command = zero
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
	// write command on data pins _____________________
	PORTA = (PORTA & 0x0f) | (command & 0xf0); // for the first number of command
    2092:	ab e3       	ldi	r26, 0x3B	; 59
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	eb e3       	ldi	r30, 0x3B	; 59
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	98 2f       	mov	r25, r24
    209e:	9f 70       	andi	r25, 0x0F	; 15
    20a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a2:	80 7f       	andi	r24, 0xF0	; 240
    20a4:	89 2b       	or	r24, r25
    20a6:	8c 93       	st	X, r24
	Dio_SetPinValue(GroupB,PIN3,HIGH); //enable
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	63 e0       	ldi	r22, 0x03	; 3
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a0 e0       	ldi	r26, 0x00	; 0
    20b8:	b0 e4       	ldi	r27, 0x40	; 64
    20ba:	89 8f       	std	Y+25, r24	; 0x19
    20bc:	9a 8f       	std	Y+26, r25	; 0x1a
    20be:	ab 8f       	std	Y+27, r26	; 0x1b
    20c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c2:	69 8d       	ldd	r22, Y+25	; 0x19
    20c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	4a e7       	ldi	r20, 0x7A	; 122
    20d0:	55 e4       	ldi	r21, 0x45	; 69
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8d 8b       	std	Y+21, r24	; 0x15
    20dc:	9e 8b       	std	Y+22, r25	; 0x16
    20de:	af 8b       	std	Y+23, r26	; 0x17
    20e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20e2:	6d 89       	ldd	r22, Y+21	; 0x15
    20e4:	7e 89       	ldd	r23, Y+22	; 0x16
    20e6:	8f 89       	ldd	r24, Y+23	; 0x17
    20e8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f6:	88 23       	and	r24, r24
    20f8:	2c f4       	brge	.+10     	; 0x2104 <lcd_write_command+0x9c>
		__ticks = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9c 8b       	std	Y+20, r25	; 0x14
    2100:	8b 8b       	std	Y+19, r24	; 0x13
    2102:	3f c0       	rjmp	.+126    	; 0x2182 <lcd_write_command+0x11a>
	else if (__tmp > 65535)
    2104:	6d 89       	ldd	r22, Y+21	; 0x15
    2106:	7e 89       	ldd	r23, Y+22	; 0x16
    2108:	8f 89       	ldd	r24, Y+23	; 0x17
    210a:	98 8d       	ldd	r25, Y+24	; 0x18
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	3f ef       	ldi	r19, 0xFF	; 255
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	57 e4       	ldi	r21, 0x47	; 71
    2114:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2118:	18 16       	cp	r1, r24
    211a:	4c f5       	brge	.+82     	; 0x216e <lcd_write_command+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211c:	69 8d       	ldd	r22, Y+25	; 0x19
    211e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2120:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2122:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e2       	ldi	r20, 0x20	; 32
    212a:	51 e4       	ldi	r21, 0x41	; 65
    212c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
    2144:	0f c0       	rjmp	.+30     	; 0x2164 <lcd_write_command+0xfc>
    2146:	80 e9       	ldi	r24, 0x90	; 144
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	9a 8b       	std	Y+18, r25	; 0x12
    214c:	89 8b       	std	Y+17, r24	; 0x11
    214e:	89 89       	ldd	r24, Y+17	; 0x11
    2150:	9a 89       	ldd	r25, Y+18	; 0x12
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <lcd_write_command+0xea>
    2156:	9a 8b       	std	Y+18, r25	; 0x12
    2158:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215a:	8b 89       	ldd	r24, Y+19	; 0x13
    215c:	9c 89       	ldd	r25, Y+20	; 0x14
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	9c 8b       	std	Y+20, r25	; 0x14
    2162:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2164:	8b 89       	ldd	r24, Y+19	; 0x13
    2166:	9c 89       	ldd	r25, Y+20	; 0x14
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	69 f7       	brne	.-38     	; 0x2146 <lcd_write_command+0xde>
    216c:	14 c0       	rjmp	.+40     	; 0x2196 <lcd_write_command+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216e:	6d 89       	ldd	r22, Y+21	; 0x15
    2170:	7e 89       	ldd	r23, Y+22	; 0x16
    2172:	8f 89       	ldd	r24, Y+23	; 0x17
    2174:	98 8d       	ldd	r25, Y+24	; 0x18
    2176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9c 8b       	std	Y+20, r25	; 0x14
    2180:	8b 8b       	std	Y+19, r24	; 0x13
    2182:	8b 89       	ldd	r24, Y+19	; 0x13
    2184:	9c 89       	ldd	r25, Y+20	; 0x14
    2186:	98 8b       	std	Y+16, r25	; 0x10
    2188:	8f 87       	std	Y+15, r24	; 0x0f
    218a:	8f 85       	ldd	r24, Y+15	; 0x0f
    218c:	98 89       	ldd	r25, Y+16	; 0x10
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <lcd_write_command+0x126>
    2192:	98 8b       	std	Y+16, r25	; 0x10
    2194:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_SetPinValue(GroupB,PIN3,LOW);
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	63 e0       	ldi	r22, 0x03	; 3
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
	PORTA = (PORTA & 0x0f) | ((command<<4) & 0xf0); // for the second number of command
    21a0:	ab e3       	ldi	r26, 0x3B	; 59
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	eb e3       	ldi	r30, 0x3B	; 59
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	28 2f       	mov	r18, r24
    21ac:	2f 70       	andi	r18, 0x0F	; 15
    21ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	82 95       	swap	r24
    21b6:	92 95       	swap	r25
    21b8:	90 7f       	andi	r25, 0xF0	; 240
    21ba:	98 27       	eor	r25, r24
    21bc:	80 7f       	andi	r24, 0xF0	; 240
    21be:	98 27       	eor	r25, r24
    21c0:	82 2b       	or	r24, r18
    21c2:	8c 93       	st	X, r24
	//enable pin
	Dio_SetPinValue(GroupB,PIN3,HIGH); // enable
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	63 e0       	ldi	r22, 0x03	; 3
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	a0 e0       	ldi	r26, 0x00	; 0
    21d4:	b0 e4       	ldi	r27, 0x40	; 64
    21d6:	8b 87       	std	Y+11, r24	; 0x0b
    21d8:	9c 87       	std	Y+12, r25	; 0x0c
    21da:	ad 87       	std	Y+13, r26	; 0x0d
    21dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21de:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	4a e7       	ldi	r20, 0x7A	; 122
    21ec:	55 e4       	ldi	r21, 0x45	; 69
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	8f 83       	std	Y+7, r24	; 0x07
    21f8:	98 87       	std	Y+8, r25	; 0x08
    21fa:	a9 87       	std	Y+9, r26	; 0x09
    21fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2200:	78 85       	ldd	r23, Y+8	; 0x08
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e8       	ldi	r20, 0x80	; 128
    220c:	5f e3       	ldi	r21, 0x3F	; 63
    220e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2212:	88 23       	and	r24, r24
    2214:	2c f4       	brge	.+10     	; 0x2220 <lcd_write_command+0x1b8>
		__ticks = 1;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	3f c0       	rjmp	.+126    	; 0x229e <lcd_write_command+0x236>
	else if (__tmp > 65535)
    2220:	6f 81       	ldd	r22, Y+7	; 0x07
    2222:	78 85       	ldd	r23, Y+8	; 0x08
    2224:	89 85       	ldd	r24, Y+9	; 0x09
    2226:	9a 85       	ldd	r25, Y+10	; 0x0a
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	3f ef       	ldi	r19, 0xFF	; 255
    222c:	4f e7       	ldi	r20, 0x7F	; 127
    222e:	57 e4       	ldi	r21, 0x47	; 71
    2230:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2234:	18 16       	cp	r1, r24
    2236:	4c f5       	brge	.+82     	; 0x228a <lcd_write_command+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2238:	6b 85       	ldd	r22, Y+11	; 0x0b
    223a:	7c 85       	ldd	r23, Y+12	; 0x0c
    223c:	8d 85       	ldd	r24, Y+13	; 0x0d
    223e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e2       	ldi	r20, 0x20	; 32
    2246:	51 e4       	ldi	r21, 0x41	; 65
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <lcd_write_command+0x218>
    2262:	80 e9       	ldi	r24, 0x90	; 144
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	9c 83       	std	Y+4, r25	; 0x04
    2268:	8b 83       	std	Y+3, r24	; 0x03
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <lcd_write_command+0x206>
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	69 f7       	brne	.-38     	; 0x2262 <lcd_write_command+0x1fa>
    2288:	14 c0       	rjmp	.+40     	; 0x22b2 <lcd_write_command+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <lcd_write_command+0x242>
    22ae:	9a 83       	std	Y+2, r25	; 0x02
    22b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_SetPinValue(GroupB,PIN3,LOW);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	63 e0       	ldi	r22, 0x03	; 3
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>


}
    22bc:	6d 96       	adiw	r28, 0x1d	; 29
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <lcd_write_data>:

void lcd_write_data (u8 data){
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	6d 97       	sbiw	r28, 0x1d	; 29
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_SetPinValue(GroupB,PIN2,LOW); // R\W --> write
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	62 e0       	ldi	r22, 0x02	; 2
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
	Dio_SetPinValue(GroupB,PIN1,HIGH); // RS --> data = 1 ;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	61 e0       	ldi	r22, 0x01	; 1
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
	// write command on data pins _____________________
	PORTA = (PORTA & 0x0f) | (data & 0xf0); // for the first number of command
    22f8:	ab e3       	ldi	r26, 0x3B	; 59
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	eb e3       	ldi	r30, 0x3B	; 59
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	98 2f       	mov	r25, r24
    2304:	9f 70       	andi	r25, 0x0F	; 15
    2306:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2308:	80 7f       	andi	r24, 0xF0	; 240
    230a:	89 2b       	or	r24, r25
    230c:	8c 93       	st	X, r24
	Dio_SetPinValue(GroupB,PIN3,HIGH); //enable
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	63 e0       	ldi	r22, 0x03	; 3
    2312:	41 e0       	ldi	r20, 0x01	; 1
    2314:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e0       	ldi	r26, 0x00	; 0
    231e:	b0 e4       	ldi	r27, 0x40	; 64
    2320:	89 8f       	std	Y+25, r24	; 0x19
    2322:	9a 8f       	std	Y+26, r25	; 0x1a
    2324:	ab 8f       	std	Y+27, r26	; 0x1b
    2326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	69 8d       	ldd	r22, Y+25	; 0x19
    232a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a e7       	ldi	r20, 0x7A	; 122
    2336:	55 e4       	ldi	r21, 0x45	; 69
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8d 8b       	std	Y+21, r24	; 0x15
    2342:	9e 8b       	std	Y+22, r25	; 0x16
    2344:	af 8b       	std	Y+23, r26	; 0x17
    2346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <lcd_write_data+0x9c>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <lcd_write_data+0x11a>
	else if (__tmp > 65535)
    236a:	6d 89       	ldd	r22, Y+21	; 0x15
    236c:	7e 89       	ldd	r23, Y+22	; 0x16
    236e:	8f 89       	ldd	r24, Y+23	; 0x17
    2370:	98 8d       	ldd	r25, Y+24	; 0x18
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <lcd_write_data+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	69 8d       	ldd	r22, Y+25	; 0x19
    2384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <lcd_write_data+0xfc>
    23ac:	80 e9       	ldi	r24, 0x90	; 144
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	9a 8b       	std	Y+18, r25	; 0x12
    23b2:	89 8b       	std	Y+17, r24	; 0x11
    23b4:	89 89       	ldd	r24, Y+17	; 0x11
    23b6:	9a 89       	ldd	r25, Y+18	; 0x12
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <lcd_write_data+0xea>
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8b 89       	ldd	r24, Y+19	; 0x13
    23c2:	9c 89       	ldd	r25, Y+20	; 0x14
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <lcd_write_data+0xde>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <lcd_write_data+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9c 8b       	std	Y+20, r25	; 0x14
    23e6:	8b 8b       	std	Y+19, r24	; 0x13
    23e8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ea:	9c 89       	ldd	r25, Y+20	; 0x14
    23ec:	98 8b       	std	Y+16, r25	; 0x10
    23ee:	8f 87       	std	Y+15, r24	; 0x0f
    23f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f2:	98 89       	ldd	r25, Y+16	; 0x10
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <lcd_write_data+0x126>
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_SetPinValue(GroupB,PIN3,LOW);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	63 e0       	ldi	r22, 0x03	; 3
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
	PORTA = (PORTA & 0x0f) | ((data<<4) & 0xf0); // for the second number of command
    2406:	ab e3       	ldi	r26, 0x3B	; 59
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	eb e3       	ldi	r30, 0x3B	; 59
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	28 2f       	mov	r18, r24
    2412:	2f 70       	andi	r18, 0x0F	; 15
    2414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2416:	88 2f       	mov	r24, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	82 95       	swap	r24
    241c:	92 95       	swap	r25
    241e:	90 7f       	andi	r25, 0xF0	; 240
    2420:	98 27       	eor	r25, r24
    2422:	80 7f       	andi	r24, 0xF0	; 240
    2424:	98 27       	eor	r25, r24
    2426:	82 2b       	or	r24, r18
    2428:	8c 93       	st	X, r24
	//enable pin
	Dio_SetPinValue(GroupB,PIN3,HIGH); // enable
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	63 e0       	ldi	r22, 0x03	; 3
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	a0 e0       	ldi	r26, 0x00	; 0
    243a:	b0 e4       	ldi	r27, 0x40	; 64
    243c:	8b 87       	std	Y+11, r24	; 0x0b
    243e:	9c 87       	std	Y+12, r25	; 0x0c
    2440:	ad 87       	std	Y+13, r26	; 0x0d
    2442:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2444:	6b 85       	ldd	r22, Y+11	; 0x0b
    2446:	7c 85       	ldd	r23, Y+12	; 0x0c
    2448:	8d 85       	ldd	r24, Y+13	; 0x0d
    244a:	9e 85       	ldd	r25, Y+14	; 0x0e
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	4a e7       	ldi	r20, 0x7A	; 122
    2452:	55 e4       	ldi	r21, 0x45	; 69
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	8f 83       	std	Y+7, r24	; 0x07
    245e:	98 87       	std	Y+8, r25	; 0x08
    2460:	a9 87       	std	Y+9, r26	; 0x09
    2462:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2464:	6f 81       	ldd	r22, Y+7	; 0x07
    2466:	78 85       	ldd	r23, Y+8	; 0x08
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e8       	ldi	r20, 0x80	; 128
    2472:	5f e3       	ldi	r21, 0x3F	; 63
    2474:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2478:	88 23       	and	r24, r24
    247a:	2c f4       	brge	.+10     	; 0x2486 <lcd_write_data+0x1b8>
		__ticks = 1;
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9e 83       	std	Y+6, r25	; 0x06
    2482:	8d 83       	std	Y+5, r24	; 0x05
    2484:	3f c0       	rjmp	.+126    	; 0x2504 <lcd_write_data+0x236>
	else if (__tmp > 65535)
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	3f ef       	ldi	r19, 0xFF	; 255
    2492:	4f e7       	ldi	r20, 0x7F	; 127
    2494:	57 e4       	ldi	r21, 0x47	; 71
    2496:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249a:	18 16       	cp	r1, r24
    249c:	4c f5       	brge	.+82     	; 0x24f0 <lcd_write_data+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249e:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e2       	ldi	r20, 0x20	; 32
    24ac:	51 e4       	ldi	r21, 0x41	; 65
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	bc 01       	movw	r22, r24
    24b8:	cd 01       	movw	r24, r26
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	0f c0       	rjmp	.+30     	; 0x24e6 <lcd_write_data+0x218>
    24c8:	80 e9       	ldi	r24, 0x90	; 144
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	9c 83       	std	Y+4, r25	; 0x04
    24ce:	8b 83       	std	Y+3, r24	; 0x03
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	9c 81       	ldd	r25, Y+4	; 0x04
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <lcd_write_data+0x206>
    24d8:	9c 83       	std	Y+4, r25	; 0x04
    24da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	9e 81       	ldd	r25, Y+6	; 0x06
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	69 f7       	brne	.-38     	; 0x24c8 <lcd_write_data+0x1fa>
    24ee:	14 c0       	rjmp	.+40     	; 0x2518 <lcd_write_data+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	9a 81       	ldd	r25, Y+2	; 0x02
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <lcd_write_data+0x242>
    2514:	9a 83       	std	Y+2, r25	; 0x02
    2516:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_SetPinValue(GroupB,PIN3,LOW);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	63 e0       	ldi	r22, 0x03	; 3
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>


}
    2522:	6d 96       	adiw	r28, 0x1d	; 29
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <lcd_writeword>:
void lcd_writeword (u8 arr[])
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <lcd_writeword+0x6>
    253a:	00 d0       	rcall	.+0      	; 0x253c <lcd_writeword+0x8>
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;i<16;i++)
    2544:	1a 82       	std	Y+2, r1	; 0x02
    2546:	19 82       	std	Y+1, r1	; 0x01
    2548:	19 c0       	rjmp	.+50     	; 0x257c <lcd_writeword+0x48>
	{
		if(arr[i]!='\0')
    254a:	29 81       	ldd	r18, Y+1	; 0x01
    254c:	3a 81       	ldd	r19, Y+2	; 0x02
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	fc 01       	movw	r30, r24
    2554:	e2 0f       	add	r30, r18
    2556:	f3 1f       	adc	r31, r19
    2558:	80 81       	ld	r24, Z
    255a:	88 23       	and	r24, r24
    255c:	a1 f0       	breq	.+40     	; 0x2586 <lcd_writeword+0x52>
		{
			lcd_write_data(arr[i]);
    255e:	29 81       	ldd	r18, Y+1	; 0x01
    2560:	3a 81       	ldd	r19, Y+2	; 0x02
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	fc 01       	movw	r30, r24
    2568:	e2 0f       	add	r30, r18
    256a:	f3 1f       	adc	r31, r19
    256c:	80 81       	ld	r24, Z
    256e:	0e 94 67 11 	call	0x22ce	; 0x22ce <lcd_write_data>


}
void lcd_writeword (u8 arr[])
{
	for(int i=0;i<16;i++)
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	01 96       	adiw	r24, 0x01	; 1
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	80 31       	cpi	r24, 0x10	; 16
    2582:	91 05       	cpc	r25, r1
    2584:	14 f3       	brlt	.-60     	; 0x254a <lcd_writeword+0x16>
		else
		{
			break;
		}
	}
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <lcd_print_number>:
void lcd_print_number(u32 num)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	a4 97       	sbiw	r28, 0x24	; 36
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	69 a3       	std	Y+33, r22	; 0x21
    25aa:	7a a3       	std	Y+34, r23	; 0x22
    25ac:	8b a3       	std	Y+35, r24	; 0x23
    25ae:	9c a3       	std	Y+36, r25	; 0x24
	u32 string[8];
	itoa(num,string,10);
    25b0:	89 a1       	ldd	r24, Y+33	; 0x21
    25b2:	9a a1       	ldd	r25, Y+34	; 0x22
    25b4:	9e 01       	movw	r18, r28
    25b6:	2f 5f       	subi	r18, 0xFF	; 255
    25b8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ba:	b9 01       	movw	r22, r18
    25bc:	4a e0       	ldi	r20, 0x0A	; 10
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	0e 94 5f 19 	call	0x32be	; 0x32be <itoa>
	lcd_writeword(string);
    25c4:	ce 01       	movw	r24, r28
    25c6:	01 96       	adiw	r24, 0x01	; 1
    25c8:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
}
    25cc:	a4 96       	adiw	r28, 0x24	; 36
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <lcd_Clean>:

void lcd_Clean(void)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <lcd_Clean+0x6>
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
	lcd_write_command(0x80);
    25e8:	80 e8       	ldi	r24, 0x80	; 128
    25ea:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
	for(u8 i=0 ; i<16 ; i++)
    25ee:	1a 82       	std	Y+2, r1	; 0x02
    25f0:	06 c0       	rjmp	.+12     	; 0x25fe <lcd_Clean+0x20>
	{
		lcd_write_data(' ');
    25f2:	80 e2       	ldi	r24, 0x20	; 32
    25f4:	0e 94 67 11 	call	0x22ce	; 0x22ce <lcd_write_data>
}

void lcd_Clean(void)
{
	lcd_write_command(0x80);
	for(u8 i=0 ; i<16 ; i++)
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	8a 83       	std	Y+2, r24	; 0x02
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	80 31       	cpi	r24, 0x10	; 16
    2602:	b8 f3       	brcs	.-18     	; 0x25f2 <lcd_Clean+0x14>
	{
		lcd_write_data(' ');
	}

	lcd_write_command(0xc0);
    2604:	80 ec       	ldi	r24, 0xC0	; 192
    2606:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
	for(u8 i=0 ; i<16 ; i++)
    260a:	19 82       	std	Y+1, r1	; 0x01
    260c:	06 c0       	rjmp	.+12     	; 0x261a <lcd_Clean+0x3c>
	{
		lcd_write_data(' ');
    260e:	80 e2       	ldi	r24, 0x20	; 32
    2610:	0e 94 67 11 	call	0x22ce	; 0x22ce <lcd_write_data>
	{
		lcd_write_data(' ');
	}

	lcd_write_command(0xc0);
	for(u8 i=0 ; i<16 ; i++)
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	8f 5f       	subi	r24, 0xFF	; 255
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	80 31       	cpi	r24, 0x10	; 16
    261e:	b8 f3       	brcs	.-18     	; 0x260e <lcd_Clean+0x30>
	{
		lcd_write_data(' ');
	}
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <Sensor_int>:
#include "Dio_Reg.h"
#include "Dio_int.h"
#include "Sensors_int.h"

void Sensor_int(void)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(GroupD,PIN0,INPUT);
    2632:	83 e0       	ldi	r24, 0x03	; 3
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupD,PIN7,INPUT);
    263c:	83 e0       	ldi	r24, 0x03	; 3
    263e:	67 e0       	ldi	r22, 0x07	; 7
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN4,INPUT);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	64 e0       	ldi	r22, 0x04	; 4
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,PIN5,INPUT);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	65 e0       	ldi	r22, 0x05	; 5
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,PIN0,INPUT);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
}
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <Sensor_Reading>:

u8 Sensor_Reading(u8 GroupNo, u8 PinNo)
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	00 d0       	rcall	.+0      	; 0x2670 <Sensor_Reading+0x6>
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	6a 83       	std	Y+2, r22	; 0x02
	return Dio_GetPinValue(GroupNo,PinNo);
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	6a 81       	ldd	r22, Y+2	; 0x02
    267c:	0e 94 1b 08 	call	0x1036	; 0x1036 <Dio_GetPinValue>
}
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <LED>:
#include "Dio_Int.h"
#include "STD_types.h"
#include"Utilities.h"
#include "DIO_Reg.h"

void LED (u8 led){
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	00 d0       	rcall	.+0      	; 0x2690 <LED+0x6>
    2690:	0f 92       	push	r0
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	89 83       	std	Y+1, r24	; 0x01

switch(led){
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	3b 83       	std	Y+3, r19	; 0x03
    26a0:	2a 83       	std	Y+2, r18	; 0x02
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	9b 81       	ldd	r25, Y+3	; 0x03
    26a6:	81 30       	cpi	r24, 0x01	; 1
    26a8:	91 05       	cpc	r25, r1
    26aa:	79 f0       	breq	.+30     	; 0x26ca <LED+0x40>
    26ac:	2a 81       	ldd	r18, Y+2	; 0x02
    26ae:	3b 81       	ldd	r19, Y+3	; 0x03
    26b0:	22 30       	cpi	r18, 0x02	; 2
    26b2:	31 05       	cpc	r19, r1
    26b4:	81 f0       	breq	.+32     	; 0x26d6 <LED+0x4c>
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	89 f4       	brne	.+34     	; 0x26e0 <LED+0x56>
case LED0 : Dio_SetPinDirection(GroupC, PIN2, OUTPUT);break;
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	62 e0       	ldi	r22, 0x02	; 2
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
    26c8:	0b c0       	rjmp	.+22     	; 0x26e0 <LED+0x56>
case LED1 : Dio_SetPinDirection(GroupC, PIN7, OUTPUT);break;
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	67 e0       	ldi	r22, 0x07	; 7
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
    26d4:	05 c0       	rjmp	.+10     	; 0x26e0 <LED+0x56>
case LED2 : Dio_SetPinDirection(GroupD, PIN3, OUTPUT);break;
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    26d8:	63 e0       	ldi	r22, 0x03	; 3
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_SetPinDirection>
}
	}
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <LED_ON>:

void LED_ON(u8 led){
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <LED_ON+0x6>
    26f2:	0f 92       	push	r0
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	89 83       	std	Y+1, r24	; 0x01

	switch(led){
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	3b 83       	std	Y+3, r19	; 0x03
    2702:	2a 83       	std	Y+2, r18	; 0x02
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	81 30       	cpi	r24, 0x01	; 1
    270a:	91 05       	cpc	r25, r1
    270c:	79 f0       	breq	.+30     	; 0x272c <LED_ON+0x40>
    270e:	2a 81       	ldd	r18, Y+2	; 0x02
    2710:	3b 81       	ldd	r19, Y+3	; 0x03
    2712:	22 30       	cpi	r18, 0x02	; 2
    2714:	31 05       	cpc	r19, r1
    2716:	81 f0       	breq	.+32     	; 0x2738 <LED_ON+0x4c>
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	9b 81       	ldd	r25, Y+3	; 0x03
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	89 f4       	brne	.+34     	; 0x2742 <LED_ON+0x56>
	case LED0 : Dio_SetPinValue(GroupC, PIN2, HIGH);break;
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	62 e0       	ldi	r22, 0x02	; 2
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
    272a:	0b c0       	rjmp	.+22     	; 0x2742 <LED_ON+0x56>
	case LED1 : Dio_SetPinValue(GroupC, PIN7, HIGH);break;
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	67 e0       	ldi	r22, 0x07	; 7
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
    2736:	05 c0       	rjmp	.+10     	; 0x2742 <LED_ON+0x56>
	case LED2 : Dio_SetPinValue(GroupD, PIN3, HIGH);break;
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	63 e0       	ldi	r22, 0x03	; 3
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
	}

}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <LED_OFF>:
void LED_OFF(u8 led){
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	00 d0       	rcall	.+0      	; 0x2754 <LED_OFF+0x6>
    2754:	0f 92       	push	r0
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	89 83       	std	Y+1, r24	; 0x01

	switch(led){
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	3b 83       	std	Y+3, r19	; 0x03
    2764:	2a 83       	std	Y+2, r18	; 0x02
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	91 05       	cpc	r25, r1
    276e:	79 f0       	breq	.+30     	; 0x278e <LED_OFF+0x40>
    2770:	2a 81       	ldd	r18, Y+2	; 0x02
    2772:	3b 81       	ldd	r19, Y+3	; 0x03
    2774:	22 30       	cpi	r18, 0x02	; 2
    2776:	31 05       	cpc	r19, r1
    2778:	81 f0       	breq	.+32     	; 0x279a <LED_OFF+0x4c>
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	89 f4       	brne	.+34     	; 0x27a4 <LED_OFF+0x56>
	case LED0 : Dio_SetPinValue(GroupC, PIN2, LOW);break;
    2782:	82 e0       	ldi	r24, 0x02	; 2
    2784:	62 e0       	ldi	r22, 0x02	; 2
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
    278c:	0b c0       	rjmp	.+22     	; 0x27a4 <LED_OFF+0x56>
	case LED1 : Dio_SetPinValue(GroupC, PIN7, LOW);break;
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	67 e0       	ldi	r22, 0x07	; 7
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
    2798:	05 c0       	rjmp	.+10     	; 0x27a4 <LED_OFF+0x56>
	case LED2 : Dio_SetPinValue(GroupD, PIN3, LOW);break;
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	63 e0       	ldi	r22, 0x03	; 3
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 aa 06 	call	0xd54	; 0xd54 <Dio_SetPinValue>
	}

}
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <LED_TOG>:

void LED_TOG(u8 led){
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <LED_TOG+0x6>
    27b6:	0f 92       	push	r0
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	89 83       	std	Y+1, r24	; 0x01
	switch(led){
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	3b 83       	std	Y+3, r19	; 0x03
    27c6:	2a 83       	std	Y+2, r18	; 0x02
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	9b 81       	ldd	r25, Y+3	; 0x03
    27cc:	81 30       	cpi	r24, 0x01	; 1
    27ce:	91 05       	cpc	r25, r1
    27d0:	91 f0       	breq	.+36     	; 0x27f6 <LED_TOG+0x46>
    27d2:	2a 81       	ldd	r18, Y+2	; 0x02
    27d4:	3b 81       	ldd	r19, Y+3	; 0x03
    27d6:	22 30       	cpi	r18, 0x02	; 2
    27d8:	31 05       	cpc	r19, r1
    27da:	b1 f0       	breq	.+44     	; 0x2808 <LED_TOG+0x58>
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	9b 81       	ldd	r25, Y+3	; 0x03
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	d1 f4       	brne	.+52     	; 0x2818 <LED_TOG+0x68>
	case LED0 : tog_bit(PORTC,2);break;
    27e4:	a5 e3       	ldi	r26, 0x35	; 53
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e5 e3       	ldi	r30, 0x35	; 53
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	90 81       	ld	r25, Z
    27ee:	84 e0       	ldi	r24, 0x04	; 4
    27f0:	89 27       	eor	r24, r25
    27f2:	8c 93       	st	X, r24
    27f4:	11 c0       	rjmp	.+34     	; 0x2818 <LED_TOG+0x68>
	case LED1 : tog_bit(PORTC,7);break;
    27f6:	a5 e3       	ldi	r26, 0x35	; 53
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e5 e3       	ldi	r30, 0x35	; 53
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	90 81       	ld	r25, Z
    2800:	80 e8       	ldi	r24, 0x80	; 128
    2802:	89 27       	eor	r24, r25
    2804:	8c 93       	st	X, r24
    2806:	08 c0       	rjmp	.+16     	; 0x2818 <LED_TOG+0x68>
	case LED2 : tog_bit(PORTD,3);break;
    2808:	a2 e3       	ldi	r26, 0x32	; 50
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e2 e3       	ldi	r30, 0x32	; 50
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	90 81       	ld	r25, Z
    2812:	88 e0       	ldi	r24, 0x08	; 8
    2814:	89 27       	eor	r24, r25
    2816:	8c 93       	st	X, r24
	}
}
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <main>:

u8 Array[16]; //Array For Storing String Word


int main()
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
	Sensor_int(); //For Required Sensor Input Pins Which Connected on Kit
    282c:	0e 94 15 13 	call	0x262a	; 0x262a <Sensor_int>
	lcd_init();
    2830:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <lcd_init>
	EEPROM_int();
    2834:	0e 94 86 09 	call	0x130c	; 0x130c <EEPROM_int>
	while(1)
	{
		//1:

		if(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==HIGH && Sensor_Reading(GroupA,PIN0)==HIGH)
    2838:	83 e0       	ldi	r24, 0x03	; 3
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	09 f0       	breq	.+2      	; 0x2846 <main+0x22>
    2844:	50 c0       	rjmp	.+160    	; 0x28e6 <main+0xc2>
    2846:	83 e0       	ldi	r24, 0x03	; 3
    2848:	67 e0       	ldi	r22, 0x07	; 7
    284a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	09 f0       	breq	.+2      	; 0x2854 <main+0x30>
    2852:	49 c0       	rjmp	.+146    	; 0x28e6 <main+0xc2>
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	64 e0       	ldi	r22, 0x04	; 4
    2858:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	09 f0       	breq	.+2      	; 0x2862 <main+0x3e>
    2860:	42 c0       	rjmp	.+132    	; 0x28e6 <main+0xc2>
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	65 e0       	ldi	r22, 0x05	; 5
    2866:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    286a:	81 30       	cpi	r24, 0x01	; 1
    286c:	e1 f5       	brne	.+120    	; 0x28e6 <main+0xc2>
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2876:	81 30       	cpi	r24, 0x01	; 1
    2878:	b1 f5       	brne	.+108    	; 0x28e6 <main+0xc2>
		{
			Clean_Array(Array); //Clean The Array of Char.
    287a:	88 e6       	ldi	r24, 0x68	; 104
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2882:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(87,Array); //Call String Which Starts for Location 87 in Memory
    2886:	28 e6       	ldi	r18, 0x68	; 104
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	87 e5       	ldi	r24, 0x57	; 87
    288c:	b9 01       	movw	r22, r18
    288e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2892:	80 e8       	ldi	r24, 0x80	; 128
    2894:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print Welcome
    2898:	88 e6       	ldi	r24, 0x68	; 104
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==HIGH && Sensor_Reading(GroupA,PIN0)==HIGH);
    28a0:	83 e0       	ldi	r24, 0x03	; 3
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	09 f0       	breq	.+2      	; 0x28ae <main+0x8a>
    28ac:	1c c1       	rjmp	.+568    	; 0x2ae6 <main+0x2c2>
    28ae:	83 e0       	ldi	r24, 0x03	; 3
    28b0:	67 e0       	ldi	r22, 0x07	; 7
    28b2:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    28b6:	81 30       	cpi	r24, 0x01	; 1
    28b8:	09 f0       	breq	.+2      	; 0x28bc <main+0x98>
    28ba:	15 c1       	rjmp	.+554    	; 0x2ae6 <main+0x2c2>
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	64 e0       	ldi	r22, 0x04	; 4
    28c0:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	09 f0       	breq	.+2      	; 0x28ca <main+0xa6>
    28c8:	0e c1       	rjmp	.+540    	; 0x2ae6 <main+0x2c2>
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	65 e0       	ldi	r22, 0x05	; 5
    28ce:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <main+0xb4>
    28d6:	07 c1       	rjmp	.+526    	; 0x2ae6 <main+0x2c2>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	f1 f2       	breq	.-68     	; 0x28a0 <main+0x7c>
    28e4:	00 c1       	rjmp	.+512    	; 0x2ae6 <main+0x2c2>
		}

		//2:

		else if(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH)
    28e6:	83 e0       	ldi	r24, 0x03	; 3
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    28ee:	81 30       	cpi	r24, 0x01	; 1
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <main+0xd0>
    28f2:	50 c0       	rjmp	.+160    	; 0x2994 <main+0x170>
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    28fc:	81 30       	cpi	r24, 0x01	; 1
    28fe:	09 f0       	breq	.+2      	; 0x2902 <main+0xde>
    2900:	49 c0       	rjmp	.+146    	; 0x2994 <main+0x170>
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	64 e0       	ldi	r22, 0x04	; 4
    2906:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    290a:	88 23       	and	r24, r24
    290c:	09 f0       	breq	.+2      	; 0x2910 <main+0xec>
    290e:	42 c0       	rjmp	.+132    	; 0x2994 <main+0x170>
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	65 e0       	ldi	r22, 0x05	; 5
    2914:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2918:	88 23       	and	r24, r24
    291a:	e1 f5       	brne	.+120    	; 0x2994 <main+0x170>
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	b1 f5       	brne	.+108    	; 0x2994 <main+0x170>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2928:	88 e6       	ldi	r24, 0x68	; 104
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2930:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(34,Array); //Call String Which Starts for Location 34 in Memory
    2934:	28 e6       	ldi	r18, 0x68	; 104
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	82 e2       	ldi	r24, 0x22	; 34
    293a:	b9 01       	movw	r22, r18
    293c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2940:	80 e8       	ldi	r24, 0x80	; 128
    2942:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print ILOVEYOU
    2946:	88 e6       	ldi	r24, 0x68	; 104
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH);
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2956:	81 30       	cpi	r24, 0x01	; 1
    2958:	09 f0       	breq	.+2      	; 0x295c <main+0x138>
    295a:	c5 c0       	rjmp	.+394    	; 0x2ae6 <main+0x2c2>
    295c:	83 e0       	ldi	r24, 0x03	; 3
    295e:	67 e0       	ldi	r22, 0x07	; 7
    2960:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	09 f0       	breq	.+2      	; 0x296a <main+0x146>
    2968:	be c0       	rjmp	.+380    	; 0x2ae6 <main+0x2c2>
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	64 e0       	ldi	r22, 0x04	; 4
    296e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2972:	88 23       	and	r24, r24
    2974:	09 f0       	breq	.+2      	; 0x2978 <main+0x154>
    2976:	b7 c0       	rjmp	.+366    	; 0x2ae6 <main+0x2c2>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	65 e0       	ldi	r22, 0x05	; 5
    297c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2980:	88 23       	and	r24, r24
    2982:	09 f0       	breq	.+2      	; 0x2986 <main+0x162>
    2984:	b0 c0       	rjmp	.+352    	; 0x2ae6 <main+0x2c2>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	f1 f2       	breq	.-68     	; 0x294e <main+0x12a>
    2992:	a9 c0       	rjmp	.+338    	; 0x2ae6 <main+0x2c2>
		}

		//3:

		else if(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW)
    2994:	83 e0       	ldi	r24, 0x03	; 3
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    299c:	88 23       	and	r24, r24
    299e:	09 f0       	breq	.+2      	; 0x29a2 <main+0x17e>
    29a0:	50 c0       	rjmp	.+160    	; 0x2a42 <main+0x21e>
    29a2:	83 e0       	ldi	r24, 0x03	; 3
    29a4:	67 e0       	ldi	r22, 0x07	; 7
    29a6:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    29aa:	81 30       	cpi	r24, 0x01	; 1
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <main+0x18c>
    29ae:	49 c0       	rjmp	.+146    	; 0x2a42 <main+0x21e>
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	64 e0       	ldi	r22, 0x04	; 4
    29b4:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	09 f0       	breq	.+2      	; 0x29be <main+0x19a>
    29bc:	42 c0       	rjmp	.+132    	; 0x2a42 <main+0x21e>
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	65 e0       	ldi	r22, 0x05	; 5
    29c2:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    29c6:	88 23       	and	r24, r24
    29c8:	e1 f5       	brne	.+120    	; 0x2a42 <main+0x21e>
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	60 e0       	ldi	r22, 0x00	; 0
    29ce:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    29d2:	88 23       	and	r24, r24
    29d4:	b1 f5       	brne	.+108    	; 0x2a42 <main+0x21e>
		{
			Clean_Array(Array); //Clean The Array of Char.
    29d6:	88 e6       	ldi	r24, 0x68	; 104
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    29de:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(0,Array); //Call String Which Starts for Location 34 in Memory
    29e2:	28 e6       	ldi	r18, 0x68	; 104
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	b9 01       	movw	r22, r18
    29ea:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    29ee:	80 e8       	ldi	r24, 0x80	; 128
    29f0:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print I'mWatchingYou
    29f4:	88 e6       	ldi	r24, 0x68	; 104
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW);
    29fc:	83 e0       	ldi	r24, 0x03	; 3
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a04:	88 23       	and	r24, r24
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <main+0x1e6>
    2a08:	6e c0       	rjmp	.+220    	; 0x2ae6 <main+0x2c2>
    2a0a:	83 e0       	ldi	r24, 0x03	; 3
    2a0c:	67 e0       	ldi	r22, 0x07	; 7
    2a0e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a12:	81 30       	cpi	r24, 0x01	; 1
    2a14:	09 f0       	breq	.+2      	; 0x2a18 <main+0x1f4>
    2a16:	67 c0       	rjmp	.+206    	; 0x2ae6 <main+0x2c2>
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	64 e0       	ldi	r22, 0x04	; 4
    2a1c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a20:	81 30       	cpi	r24, 0x01	; 1
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <main+0x202>
    2a24:	60 c0       	rjmp	.+192    	; 0x2ae6 <main+0x2c2>
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	65 e0       	ldi	r22, 0x05	; 5
    2a2a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a2e:	88 23       	and	r24, r24
    2a30:	09 f0       	breq	.+2      	; 0x2a34 <main+0x210>
    2a32:	59 c0       	rjmp	.+178    	; 0x2ae6 <main+0x2c2>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a3c:	88 23       	and	r24, r24
    2a3e:	f1 f2       	breq	.-68     	; 0x29fc <main+0x1d8>
    2a40:	52 c0       	rjmp	.+164    	; 0x2ae6 <main+0x2c2>
		}

		//4:

		else if(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH)
    2a42:	83 e0       	ldi	r24, 0x03	; 3
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a4a:	88 23       	and	r24, r24
    2a4c:	09 f0       	breq	.+2      	; 0x2a50 <main+0x22c>
    2a4e:	4b c0       	rjmp	.+150    	; 0x2ae6 <main+0x2c2>
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	67 e0       	ldi	r22, 0x07	; 7
    2a54:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a58:	88 23       	and	r24, r24
    2a5a:	09 f0       	breq	.+2      	; 0x2a5e <main+0x23a>
    2a5c:	44 c0       	rjmp	.+136    	; 0x2ae6 <main+0x2c2>
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	64 e0       	ldi	r22, 0x04	; 4
    2a62:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a66:	88 23       	and	r24, r24
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <main+0x248>
    2a6a:	3d c0       	rjmp	.+122    	; 0x2ae6 <main+0x2c2>
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	65 e0       	ldi	r22, 0x05	; 5
    2a70:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a74:	88 23       	and	r24, r24
    2a76:	b9 f5       	brne	.+110    	; 0x2ae6 <main+0x2c2>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	89 f5       	brne	.+98     	; 0x2ae6 <main+0x2c2>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2a84:	88 e6       	ldi	r24, 0x68	; 104
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2a8c:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(105,Array); //Call String Which Starts for Location 34 in Memory
    2a90:	28 e6       	ldi	r18, 0x68	; 104
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	89 e6       	ldi	r24, 0x69	; 105
    2a96:	b9 01       	movw	r22, r18
    2a98:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2a9c:	80 e8       	ldi	r24, 0x80	; 128
    2a9e:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print I
    2aa2:	88 e6       	ldi	r24, 0x68	; 104
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH);
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2ab2:	88 23       	and	r24, r24
    2ab4:	c1 f4       	brne	.+48     	; 0x2ae6 <main+0x2c2>
    2ab6:	83 e0       	ldi	r24, 0x03	; 3
    2ab8:	67 e0       	ldi	r22, 0x07	; 7
    2aba:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2abe:	88 23       	and	r24, r24
    2ac0:	91 f4       	brne	.+36     	; 0x2ae6 <main+0x2c2>
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	64 e0       	ldi	r22, 0x04	; 4
    2ac6:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2aca:	88 23       	and	r24, r24
    2acc:	61 f4       	brne	.+24     	; 0x2ae6 <main+0x2c2>
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	65 e0       	ldi	r22, 0x05	; 5
    2ad2:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2ad6:	88 23       	and	r24, r24
    2ad8:	31 f4       	brne	.+12     	; 0x2ae6 <main+0x2c2>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	11 f3       	breq	.-60     	; 0x2aaa <main+0x286>
		}

		//5:

		if(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW)
    2ae6:	83 e0       	ldi	r24, 0x03	; 3
    2ae8:	60 e0       	ldi	r22, 0x00	; 0
    2aea:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2aee:	88 23       	and	r24, r24
    2af0:	09 f0       	breq	.+2      	; 0x2af4 <main+0x2d0>
    2af2:	50 c0       	rjmp	.+160    	; 0x2b94 <main+0x370>
    2af4:	83 e0       	ldi	r24, 0x03	; 3
    2af6:	67 e0       	ldi	r22, 0x07	; 7
    2af8:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2afc:	81 30       	cpi	r24, 0x01	; 1
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <main+0x2de>
    2b00:	49 c0       	rjmp	.+146    	; 0x2b94 <main+0x370>
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	64 e0       	ldi	r22, 0x04	; 4
    2b06:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2b0a:	88 23       	and	r24, r24
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <main+0x2ec>
    2b0e:	42 c0       	rjmp	.+132    	; 0x2b94 <main+0x370>
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	65 e0       	ldi	r22, 0x05	; 5
    2b14:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2b18:	88 23       	and	r24, r24
    2b1a:	e1 f5       	brne	.+120    	; 0x2b94 <main+0x370>
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2b24:	88 23       	and	r24, r24
    2b26:	b1 f5       	brne	.+108    	; 0x2b94 <main+0x370>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2b28:	88 e6       	ldi	r24, 0x68	; 104
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2b30:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(16,Array); //Call String Which Starts for Location 87 in Memory
    2b34:	28 e6       	ldi	r18, 0x68	; 104
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	80 e1       	ldi	r24, 0x10	; 16
    2b3a:	b9 01       	movw	r22, r18
    2b3c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2b40:	80 e8       	ldi	r24, 0x80	; 128
    2b42:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print You
    2b46:	88 e6       	ldi	r24, 0x68	; 104
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW);
    2b4e:	83 e0       	ldi	r24, 0x03	; 3
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2b56:	88 23       	and	r24, r24
    2b58:	09 f0       	breq	.+2      	; 0x2b5c <main+0x338>
    2b5a:	1c c1       	rjmp	.+568    	; 0x2d94 <main+0x570>
    2b5c:	83 e0       	ldi	r24, 0x03	; 3
    2b5e:	67 e0       	ldi	r22, 0x07	; 7
    2b60:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2b64:	81 30       	cpi	r24, 0x01	; 1
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <main+0x346>
    2b68:	15 c1       	rjmp	.+554    	; 0x2d94 <main+0x570>
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	64 e0       	ldi	r22, 0x04	; 4
    2b6e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2b72:	88 23       	and	r24, r24
    2b74:	09 f0       	breq	.+2      	; 0x2b78 <main+0x354>
    2b76:	0e c1       	rjmp	.+540    	; 0x2d94 <main+0x570>
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	65 e0       	ldi	r22, 0x05	; 5
    2b7c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2b80:	88 23       	and	r24, r24
    2b82:	09 f0       	breq	.+2      	; 0x2b86 <main+0x362>
    2b84:	07 c1       	rjmp	.+526    	; 0x2d94 <main+0x570>
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2b8e:	88 23       	and	r24, r24
    2b90:	f1 f2       	breq	.-68     	; 0x2b4e <main+0x32a>
    2b92:	00 c1       	rjmp	.+512    	; 0x2d94 <main+0x570>
		}

		//6:

		else if(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH)
    2b94:	83 e0       	ldi	r24, 0x03	; 3
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2b9c:	88 23       	and	r24, r24
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <main+0x37e>
    2ba0:	50 c0       	rjmp	.+160    	; 0x2c42 <main+0x41e>
    2ba2:	83 e0       	ldi	r24, 0x03	; 3
    2ba4:	67 e0       	ldi	r22, 0x07	; 7
    2ba6:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2baa:	81 30       	cpi	r24, 0x01	; 1
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <main+0x38c>
    2bae:	49 c0       	rjmp	.+146    	; 0x2c42 <main+0x41e>
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	64 e0       	ldi	r22, 0x04	; 4
    2bb4:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2bb8:	88 23       	and	r24, r24
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <main+0x39a>
    2bbc:	42 c0       	rjmp	.+132    	; 0x2c42 <main+0x41e>
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	65 e0       	ldi	r22, 0x05	; 5
    2bc2:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2bc6:	88 23       	and	r24, r24
    2bc8:	e1 f5       	brne	.+120    	; 0x2c42 <main+0x41e>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2bd2:	81 30       	cpi	r24, 0x01	; 1
    2bd4:	b1 f5       	brne	.+108    	; 0x2c42 <main+0x41e>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2bd6:	88 e6       	ldi	r24, 0x68	; 104
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2bde:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(240,Array); //Call String Which Starts for Location 34 in Memory
    2be2:	28 e6       	ldi	r18, 0x68	; 104
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	80 ef       	ldi	r24, 0xF0	; 240
    2be8:	b9 01       	movw	r22, r18
    2bea:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2bee:	80 e8       	ldi	r24, 0x80	; 128
    2bf0:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print ThisIsTerrible
    2bf4:	88 e6       	ldi	r24, 0x68	; 104
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH);
    2bfc:	83 e0       	ldi	r24, 0x03	; 3
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c04:	88 23       	and	r24, r24
    2c06:	09 f0       	breq	.+2      	; 0x2c0a <main+0x3e6>
    2c08:	c5 c0       	rjmp	.+394    	; 0x2d94 <main+0x570>
    2c0a:	83 e0       	ldi	r24, 0x03	; 3
    2c0c:	67 e0       	ldi	r22, 0x07	; 7
    2c0e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <main+0x3f4>
    2c16:	be c0       	rjmp	.+380    	; 0x2d94 <main+0x570>
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	64 e0       	ldi	r22, 0x04	; 4
    2c1c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c20:	88 23       	and	r24, r24
    2c22:	09 f0       	breq	.+2      	; 0x2c26 <main+0x402>
    2c24:	b7 c0       	rjmp	.+366    	; 0x2d94 <main+0x570>
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	65 e0       	ldi	r22, 0x05	; 5
    2c2a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c2e:	88 23       	and	r24, r24
    2c30:	09 f0       	breq	.+2      	; 0x2c34 <main+0x410>
    2c32:	b0 c0       	rjmp	.+352    	; 0x2d94 <main+0x570>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c3c:	81 30       	cpi	r24, 0x01	; 1
    2c3e:	f1 f2       	breq	.-68     	; 0x2bfc <main+0x3d8>
    2c40:	a9 c0       	rjmp	.+338    	; 0x2d94 <main+0x570>
		}

		//7:

		else if(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW)
    2c42:	83 e0       	ldi	r24, 0x03	; 3
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c4a:	81 30       	cpi	r24, 0x01	; 1
    2c4c:	09 f0       	breq	.+2      	; 0x2c50 <main+0x42c>
    2c4e:	50 c0       	rjmp	.+160    	; 0x2cf0 <main+0x4cc>
    2c50:	83 e0       	ldi	r24, 0x03	; 3
    2c52:	67 e0       	ldi	r22, 0x07	; 7
    2c54:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c58:	88 23       	and	r24, r24
    2c5a:	09 f0       	breq	.+2      	; 0x2c5e <main+0x43a>
    2c5c:	49 c0       	rjmp	.+146    	; 0x2cf0 <main+0x4cc>
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	64 e0       	ldi	r22, 0x04	; 4
    2c62:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c66:	88 23       	and	r24, r24
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <main+0x448>
    2c6a:	42 c0       	rjmp	.+132    	; 0x2cf0 <main+0x4cc>
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	65 e0       	ldi	r22, 0x05	; 5
    2c70:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c74:	88 23       	and	r24, r24
    2c76:	e1 f5       	brne	.+120    	; 0x2cf0 <main+0x4cc>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2c80:	88 23       	and	r24, r24
    2c82:	b1 f5       	brne	.+108    	; 0x2cf0 <main+0x4cc>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2c84:	88 e6       	ldi	r24, 0x68	; 104
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2c8c:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(56,Array); //Call String Which Starts for Location 34 in Memory
    2c90:	28 e6       	ldi	r18, 0x68	; 104
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	88 e3       	ldi	r24, 0x38	; 56
    2c96:	b9 01       	movw	r22, r18
    2c98:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2c9c:	80 e8       	ldi	r24, 0x80	; 128
    2c9e:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print GoodJob
    2ca2:	88 e6       	ldi	r24, 0x68	; 104
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW);
    2caa:	83 e0       	ldi	r24, 0x03	; 3
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2cb2:	81 30       	cpi	r24, 0x01	; 1
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <main+0x494>
    2cb6:	6e c0       	rjmp	.+220    	; 0x2d94 <main+0x570>
    2cb8:	83 e0       	ldi	r24, 0x03	; 3
    2cba:	67 e0       	ldi	r22, 0x07	; 7
    2cbc:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2cc0:	88 23       	and	r24, r24
    2cc2:	09 f0       	breq	.+2      	; 0x2cc6 <main+0x4a2>
    2cc4:	67 c0       	rjmp	.+206    	; 0x2d94 <main+0x570>
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	64 e0       	ldi	r22, 0x04	; 4
    2cca:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2cce:	88 23       	and	r24, r24
    2cd0:	09 f0       	breq	.+2      	; 0x2cd4 <main+0x4b0>
    2cd2:	60 c0       	rjmp	.+192    	; 0x2d94 <main+0x570>
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	65 e0       	ldi	r22, 0x05	; 5
    2cd8:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2cdc:	88 23       	and	r24, r24
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <main+0x4be>
    2ce0:	59 c0       	rjmp	.+178    	; 0x2d94 <main+0x570>
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2cea:	88 23       	and	r24, r24
    2cec:	f1 f2       	breq	.-68     	; 0x2caa <main+0x486>
    2cee:	52 c0       	rjmp	.+164    	; 0x2d94 <main+0x570>
		}

		//8:

		else if(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH)
    2cf0:	83 e0       	ldi	r24, 0x03	; 3
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2cf8:	81 30       	cpi	r24, 0x01	; 1
    2cfa:	09 f0       	breq	.+2      	; 0x2cfe <main+0x4da>
    2cfc:	4b c0       	rjmp	.+150    	; 0x2d94 <main+0x570>
    2cfe:	83 e0       	ldi	r24, 0x03	; 3
    2d00:	67 e0       	ldi	r22, 0x07	; 7
    2d02:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d06:	81 30       	cpi	r24, 0x01	; 1
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <main+0x4e8>
    2d0a:	44 c0       	rjmp	.+136    	; 0x2d94 <main+0x570>
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	64 e0       	ldi	r22, 0x04	; 4
    2d10:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d14:	81 30       	cpi	r24, 0x01	; 1
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <main+0x4f6>
    2d18:	3d c0       	rjmp	.+122    	; 0x2d94 <main+0x570>
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	65 e0       	ldi	r22, 0x05	; 5
    2d1e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d22:	88 23       	and	r24, r24
    2d24:	b9 f5       	brne	.+110    	; 0x2d94 <main+0x570>
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	60 e0       	ldi	r22, 0x00	; 0
    2d2a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d2e:	81 30       	cpi	r24, 0x01	; 1
    2d30:	89 f5       	brne	.+98     	; 0x2d94 <main+0x570>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2d32:	88 e6       	ldi	r24, 0x68	; 104
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2d3a:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(225,Array); //Call String Which Starts for Location 34 in Memory
    2d3e:	28 e6       	ldi	r18, 0x68	; 104
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	81 ee       	ldi	r24, 0xE1	; 225
    2d44:	b9 01       	movw	r22, r18
    2d46:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2d4a:	80 e8       	ldi	r24, 0x80	; 128
    2d4c:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print ReallyILoveYou
    2d50:	88 e6       	ldi	r24, 0x68	; 104
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH);
    2d58:	83 e0       	ldi	r24, 0x03	; 3
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d60:	81 30       	cpi	r24, 0x01	; 1
    2d62:	c1 f4       	brne	.+48     	; 0x2d94 <main+0x570>
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	67 e0       	ldi	r22, 0x07	; 7
    2d68:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d6c:	81 30       	cpi	r24, 0x01	; 1
    2d6e:	91 f4       	brne	.+36     	; 0x2d94 <main+0x570>
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	64 e0       	ldi	r22, 0x04	; 4
    2d74:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d78:	81 30       	cpi	r24, 0x01	; 1
    2d7a:	61 f4       	brne	.+24     	; 0x2d94 <main+0x570>
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	65 e0       	ldi	r22, 0x05	; 5
    2d80:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d84:	88 23       	and	r24, r24
    2d86:	31 f4       	brne	.+12     	; 0x2d94 <main+0x570>
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	11 f3       	breq	.-60     	; 0x2d58 <main+0x534>
		}

		//9:

		if(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==HIGH && Sensor_Reading(GroupA,PIN0)==HIGH)
    2d94:	83 e0       	ldi	r24, 0x03	; 3
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2d9c:	88 23       	and	r24, r24
    2d9e:	09 f0       	breq	.+2      	; 0x2da2 <main+0x57e>
    2da0:	50 c0       	rjmp	.+160    	; 0x2e42 <main+0x61e>
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	67 e0       	ldi	r22, 0x07	; 7
    2da6:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2daa:	88 23       	and	r24, r24
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <main+0x58c>
    2dae:	49 c0       	rjmp	.+146    	; 0x2e42 <main+0x61e>
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	64 e0       	ldi	r22, 0x04	; 4
    2db4:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	09 f0       	breq	.+2      	; 0x2dbe <main+0x59a>
    2dbc:	42 c0       	rjmp	.+132    	; 0x2e42 <main+0x61e>
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	65 e0       	ldi	r22, 0x05	; 5
    2dc2:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2dc6:	81 30       	cpi	r24, 0x01	; 1
    2dc8:	e1 f5       	brne	.+120    	; 0x2e42 <main+0x61e>
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	60 e0       	ldi	r22, 0x00	; 0
    2dce:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2dd2:	81 30       	cpi	r24, 0x01	; 1
    2dd4:	b1 f5       	brne	.+108    	; 0x2e42 <main+0x61e>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2dd6:	88 e6       	ldi	r24, 0x68	; 104
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2dde:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(64,Array); //Call String Which Starts for Location 87 in Memory
    2de2:	28 e6       	ldi	r18, 0x68	; 104
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	80 e4       	ldi	r24, 0x40	; 64
    2de8:	b9 01       	movw	r22, r18
    2dea:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2dee:	80 e8       	ldi	r24, 0x80	; 128
    2df0:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print OK
    2df4:	88 e6       	ldi	r24, 0x68	; 104
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==HIGH && Sensor_Reading(GroupA,PIN0)==HIGH);
    2dfc:	83 e0       	ldi	r24, 0x03	; 3
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e04:	88 23       	and	r24, r24
    2e06:	09 f0       	breq	.+2      	; 0x2e0a <main+0x5e6>
    2e08:	1c c1       	rjmp	.+568    	; 0x3042 <main+0x81e>
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	67 e0       	ldi	r22, 0x07	; 7
    2e0e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e12:	88 23       	and	r24, r24
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <main+0x5f4>
    2e16:	15 c1       	rjmp	.+554    	; 0x3042 <main+0x81e>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	64 e0       	ldi	r22, 0x04	; 4
    2e1c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e20:	81 30       	cpi	r24, 0x01	; 1
    2e22:	09 f0       	breq	.+2      	; 0x2e26 <main+0x602>
    2e24:	0e c1       	rjmp	.+540    	; 0x3042 <main+0x81e>
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	65 e0       	ldi	r22, 0x05	; 5
    2e2a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e2e:	81 30       	cpi	r24, 0x01	; 1
    2e30:	09 f0       	breq	.+2      	; 0x2e34 <main+0x610>
    2e32:	07 c1       	rjmp	.+526    	; 0x3042 <main+0x81e>
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e3c:	81 30       	cpi	r24, 0x01	; 1
    2e3e:	f1 f2       	breq	.-68     	; 0x2dfc <main+0x5d8>
    2e40:	00 c1       	rjmp	.+512    	; 0x3042 <main+0x81e>
		}

		//10:

		else if(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH)
    2e42:	83 e0       	ldi	r24, 0x03	; 3
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e4a:	81 30       	cpi	r24, 0x01	; 1
    2e4c:	09 f0       	breq	.+2      	; 0x2e50 <main+0x62c>
    2e4e:	50 c0       	rjmp	.+160    	; 0x2ef0 <main+0x6cc>
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	67 e0       	ldi	r22, 0x07	; 7
    2e54:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e58:	88 23       	and	r24, r24
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <main+0x63a>
    2e5c:	49 c0       	rjmp	.+146    	; 0x2ef0 <main+0x6cc>
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	64 e0       	ldi	r22, 0x04	; 4
    2e62:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e66:	88 23       	and	r24, r24
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <main+0x648>
    2e6a:	42 c0       	rjmp	.+132    	; 0x2ef0 <main+0x6cc>
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	65 e0       	ldi	r22, 0x05	; 5
    2e70:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e74:	88 23       	and	r24, r24
    2e76:	e1 f5       	brne	.+120    	; 0x2ef0 <main+0x6cc>
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2e80:	81 30       	cpi	r24, 0x01	; 1
    2e82:	b1 f5       	brne	.+108    	; 0x2ef0 <main+0x6cc>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2e84:	88 e6       	ldi	r24, 0x68	; 104
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2e8c:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(67,Array); //Call String Which Starts for Location 34 in Memory
    2e90:	28 e6       	ldi	r18, 0x68	; 104
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	83 e4       	ldi	r24, 0x43	; 67
    2e96:	b9 01       	movw	r22, r18
    2e98:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2e9c:	80 e8       	ldi	r24, 0x80	; 128
    2e9e:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print I'mNotSure
    2ea2:	88 e6       	ldi	r24, 0x68	; 104
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH);
    2eaa:	83 e0       	ldi	r24, 0x03	; 3
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2eb2:	81 30       	cpi	r24, 0x01	; 1
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <main+0x694>
    2eb6:	c5 c0       	rjmp	.+394    	; 0x3042 <main+0x81e>
    2eb8:	83 e0       	ldi	r24, 0x03	; 3
    2eba:	67 e0       	ldi	r22, 0x07	; 7
    2ebc:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2ec0:	88 23       	and	r24, r24
    2ec2:	09 f0       	breq	.+2      	; 0x2ec6 <main+0x6a2>
    2ec4:	be c0       	rjmp	.+380    	; 0x3042 <main+0x81e>
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	64 e0       	ldi	r22, 0x04	; 4
    2eca:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2ece:	88 23       	and	r24, r24
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <main+0x6b0>
    2ed2:	b7 c0       	rjmp	.+366    	; 0x3042 <main+0x81e>
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	65 e0       	ldi	r22, 0x05	; 5
    2ed8:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2edc:	88 23       	and	r24, r24
    2ede:	09 f0       	breq	.+2      	; 0x2ee2 <main+0x6be>
    2ee0:	b0 c0       	rjmp	.+352    	; 0x3042 <main+0x81e>
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	f1 f2       	breq	.-68     	; 0x2eaa <main+0x686>
    2eee:	a9 c0       	rjmp	.+338    	; 0x3042 <main+0x81e>
		}

		//11:

		else if(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW)
    2ef0:	83 e0       	ldi	r24, 0x03	; 3
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2ef8:	81 30       	cpi	r24, 0x01	; 1
    2efa:	09 f0       	breq	.+2      	; 0x2efe <main+0x6da>
    2efc:	50 c0       	rjmp	.+160    	; 0x2f9e <main+0x77a>
    2efe:	83 e0       	ldi	r24, 0x03	; 3
    2f00:	67 e0       	ldi	r22, 0x07	; 7
    2f02:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2f06:	81 30       	cpi	r24, 0x01	; 1
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <main+0x6e8>
    2f0a:	49 c0       	rjmp	.+146    	; 0x2f9e <main+0x77a>
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	64 e0       	ldi	r22, 0x04	; 4
    2f10:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2f14:	88 23       	and	r24, r24
    2f16:	09 f0       	breq	.+2      	; 0x2f1a <main+0x6f6>
    2f18:	42 c0       	rjmp	.+132    	; 0x2f9e <main+0x77a>
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	65 e0       	ldi	r22, 0x05	; 5
    2f1e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2f22:	88 23       	and	r24, r24
    2f24:	e1 f5       	brne	.+120    	; 0x2f9e <main+0x77a>
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2f2e:	88 23       	and	r24, r24
    2f30:	b1 f5       	brne	.+108    	; 0x2f9e <main+0x77a>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2f32:	88 e6       	ldi	r24, 0x68	; 104
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2f3a:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(111,Array); //Call String Which Starts for Location 34 in Memory
    2f3e:	28 e6       	ldi	r18, 0x68	; 104
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	8f e6       	ldi	r24, 0x6F	; 111
    2f44:	b9 01       	movw	r22, r18
    2f46:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2f4a:	80 e8       	ldi	r24, 0x80	; 128
    2f4c:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print L
    2f50:	88 e6       	ldi	r24, 0x68	; 104
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==HIGH && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW);
    2f58:	83 e0       	ldi	r24, 0x03	; 3
    2f5a:	60 e0       	ldi	r22, 0x00	; 0
    2f5c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2f60:	81 30       	cpi	r24, 0x01	; 1
    2f62:	09 f0       	breq	.+2      	; 0x2f66 <main+0x742>
    2f64:	6e c0       	rjmp	.+220    	; 0x3042 <main+0x81e>
    2f66:	83 e0       	ldi	r24, 0x03	; 3
    2f68:	67 e0       	ldi	r22, 0x07	; 7
    2f6a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2f6e:	81 30       	cpi	r24, 0x01	; 1
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <main+0x750>
    2f72:	67 c0       	rjmp	.+206    	; 0x3042 <main+0x81e>
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	64 e0       	ldi	r22, 0x04	; 4
    2f78:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2f7c:	88 23       	and	r24, r24
    2f7e:	09 f0       	breq	.+2      	; 0x2f82 <main+0x75e>
    2f80:	60 c0       	rjmp	.+192    	; 0x3042 <main+0x81e>
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	65 e0       	ldi	r22, 0x05	; 5
    2f86:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2f8a:	88 23       	and	r24, r24
    2f8c:	09 f0       	breq	.+2      	; 0x2f90 <main+0x76c>
    2f8e:	59 c0       	rjmp	.+178    	; 0x3042 <main+0x81e>
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2f98:	88 23       	and	r24, r24
    2f9a:	f1 f2       	breq	.-68     	; 0x2f58 <main+0x734>
    2f9c:	52 c0       	rjmp	.+164    	; 0x3042 <main+0x81e>
		}

		//12:

		else if(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH)
    2f9e:	83 e0       	ldi	r24, 0x03	; 3
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2fa6:	88 23       	and	r24, r24
    2fa8:	09 f0       	breq	.+2      	; 0x2fac <main+0x788>
    2faa:	4b c0       	rjmp	.+150    	; 0x3042 <main+0x81e>
    2fac:	83 e0       	ldi	r24, 0x03	; 3
    2fae:	67 e0       	ldi	r22, 0x07	; 7
    2fb0:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	09 f0       	breq	.+2      	; 0x2fba <main+0x796>
    2fb8:	44 c0       	rjmp	.+136    	; 0x3042 <main+0x81e>
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	64 e0       	ldi	r22, 0x04	; 4
    2fbe:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2fc2:	81 30       	cpi	r24, 0x01	; 1
    2fc4:	09 f0       	breq	.+2      	; 0x2fc8 <main+0x7a4>
    2fc6:	3d c0       	rjmp	.+122    	; 0x3042 <main+0x81e>
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	65 e0       	ldi	r22, 0x05	; 5
    2fcc:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2fd0:	88 23       	and	r24, r24
    2fd2:	b9 f5       	brne	.+110    	; 0x3042 <main+0x81e>
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    2fdc:	81 30       	cpi	r24, 0x01	; 1
    2fde:	89 f5       	brne	.+98     	; 0x3042 <main+0x81e>
		{
			Clean_Array(Array); //Clean The Array of Char.
    2fe0:	88 e6       	ldi	r24, 0x68	; 104
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    2fe8:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(114,Array); //Call String Which Starts for Location 34 in Memory
    2fec:	28 e6       	ldi	r18, 0x68	; 104
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	82 e7       	ldi	r24, 0x72	; 114
    2ff2:	b9 01       	movw	r22, r18
    2ff4:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    2ff8:	80 e8       	ldi	r24, 0x80	; 128
    2ffa:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print 7
    2ffe:	88 e6       	ldi	r24, 0x68	; 104
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==HIGH);
    3006:	83 e0       	ldi	r24, 0x03	; 3
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    300e:	88 23       	and	r24, r24
    3010:	c1 f4       	brne	.+48     	; 0x3042 <main+0x81e>
    3012:	83 e0       	ldi	r24, 0x03	; 3
    3014:	67 e0       	ldi	r22, 0x07	; 7
    3016:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    301a:	81 30       	cpi	r24, 0x01	; 1
    301c:	91 f4       	brne	.+36     	; 0x3042 <main+0x81e>
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	64 e0       	ldi	r22, 0x04	; 4
    3022:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3026:	81 30       	cpi	r24, 0x01	; 1
    3028:	61 f4       	brne	.+24     	; 0x3042 <main+0x81e>
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	65 e0       	ldi	r22, 0x05	; 5
    302e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3032:	88 23       	and	r24, r24
    3034:	31 f4       	brne	.+12     	; 0x3042 <main+0x81e>
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    303e:	81 30       	cpi	r24, 0x01	; 1
    3040:	11 f3       	breq	.-60     	; 0x3006 <main+0x7e2>
		}

		//13:

		if(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==HIGH && Sensor_Reading(GroupA,PIN0)==LOW)
    3042:	83 e0       	ldi	r24, 0x03	; 3
    3044:	60 e0       	ldi	r22, 0x00	; 0
    3046:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    304a:	88 23       	and	r24, r24
    304c:	09 f0       	breq	.+2      	; 0x3050 <main+0x82c>
    304e:	50 c0       	rjmp	.+160    	; 0x30f0 <main+0x8cc>
    3050:	83 e0       	ldi	r24, 0x03	; 3
    3052:	67 e0       	ldi	r22, 0x07	; 7
    3054:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	09 f0       	breq	.+2      	; 0x305e <main+0x83a>
    305c:	49 c0       	rjmp	.+146    	; 0x30f0 <main+0x8cc>
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	64 e0       	ldi	r22, 0x04	; 4
    3062:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3066:	81 30       	cpi	r24, 0x01	; 1
    3068:	09 f0       	breq	.+2      	; 0x306c <main+0x848>
    306a:	42 c0       	rjmp	.+132    	; 0x30f0 <main+0x8cc>
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	65 e0       	ldi	r22, 0x05	; 5
    3070:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3074:	81 30       	cpi	r24, 0x01	; 1
    3076:	e1 f5       	brne	.+120    	; 0x30f0 <main+0x8cc>
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	60 e0       	ldi	r22, 0x00	; 0
    307c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3080:	88 23       	and	r24, r24
    3082:	b1 f5       	brne	.+108    	; 0x30f0 <main+0x8cc>
		{
			Clean_Array(Array); //Clean The Array of Char.
    3084:	88 e6       	ldi	r24, 0x68	; 104
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    308c:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(108,Array); //Call String Which Starts for Location 87 in Memory
    3090:	28 e6       	ldi	r18, 0x68	; 104
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	8c e6       	ldi	r24, 0x6C	; 108
    3096:	b9 01       	movw	r22, r18
    3098:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    309c:	80 e8       	ldi	r24, 0x80	; 128
    309e:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print W
    30a2:	88 e6       	ldi	r24, 0x68	; 104
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==HIGH && Sensor_Reading(GroupA,PIN0)==LOW);
    30aa:	83 e0       	ldi	r24, 0x03	; 3
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    30b2:	88 23       	and	r24, r24
    30b4:	09 f0       	breq	.+2      	; 0x30b8 <main+0x894>
    30b6:	c0 cb       	rjmp	.-2176   	; 0x2838 <main+0x14>
    30b8:	83 e0       	ldi	r24, 0x03	; 3
    30ba:	67 e0       	ldi	r22, 0x07	; 7
    30bc:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    30c0:	81 30       	cpi	r24, 0x01	; 1
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <main+0x8a2>
    30c4:	b9 cb       	rjmp	.-2190   	; 0x2838 <main+0x14>
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	64 e0       	ldi	r22, 0x04	; 4
    30ca:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    30ce:	81 30       	cpi	r24, 0x01	; 1
    30d0:	09 f0       	breq	.+2      	; 0x30d4 <main+0x8b0>
    30d2:	b2 cb       	rjmp	.-2204   	; 0x2838 <main+0x14>
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	65 e0       	ldi	r22, 0x05	; 5
    30d8:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	09 f0       	breq	.+2      	; 0x30e2 <main+0x8be>
    30e0:	ab cb       	rjmp	.-2218   	; 0x2838 <main+0x14>
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	60 e0       	ldi	r22, 0x00	; 0
    30e6:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    30ea:	88 23       	and	r24, r24
    30ec:	f1 f2       	breq	.-68     	; 0x30aa <main+0x886>
    30ee:	a4 cb       	rjmp	.-2232   	; 0x2838 <main+0x14>
		}

		//14:

		else if(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW)
    30f0:	83 e0       	ldi	r24, 0x03	; 3
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    30f8:	88 23       	and	r24, r24
    30fa:	09 f0       	breq	.+2      	; 0x30fe <main+0x8da>
    30fc:	50 c0       	rjmp	.+160    	; 0x319e <main+0x97a>
    30fe:	83 e0       	ldi	r24, 0x03	; 3
    3100:	67 e0       	ldi	r22, 0x07	; 7
    3102:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3106:	88 23       	and	r24, r24
    3108:	09 f0       	breq	.+2      	; 0x310c <main+0x8e8>
    310a:	49 c0       	rjmp	.+146    	; 0x319e <main+0x97a>
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	64 e0       	ldi	r22, 0x04	; 4
    3110:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3114:	88 23       	and	r24, r24
    3116:	09 f0       	breq	.+2      	; 0x311a <main+0x8f6>
    3118:	42 c0       	rjmp	.+132    	; 0x319e <main+0x97a>
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	65 e0       	ldi	r22, 0x05	; 5
    311e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3122:	88 23       	and	r24, r24
    3124:	e1 f5       	brne	.+120    	; 0x319e <main+0x97a>
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    312e:	88 23       	and	r24, r24
    3130:	b1 f5       	brne	.+108    	; 0x319e <main+0x97a>
		{
			Clean_Array(Array); //Clean The Array of Char.
    3132:	88 e6       	ldi	r24, 0x68	; 104
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    313a:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(117,Array); //Call String Which Starts for Location 34 in Memory
    313e:	28 e6       	ldi	r18, 0x68	; 104
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	85 e7       	ldi	r24, 0x75	; 117
    3144:	b9 01       	movw	r22, r18
    3146:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    314a:	80 e8       	ldi	r24, 0x80	; 128
    314c:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print Question
    3150:	88 e6       	ldi	r24, 0x68	; 104
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==LOW && Sensor_Reading(GroupB,PIN4)==LOW && Sensor_Reading(GroupB,PIN5)==LOW && Sensor_Reading(GroupA,PIN0)==LOW);
    3158:	83 e0       	ldi	r24, 0x03	; 3
    315a:	60 e0       	ldi	r22, 0x00	; 0
    315c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3160:	88 23       	and	r24, r24
    3162:	09 f0       	breq	.+2      	; 0x3166 <main+0x942>
    3164:	69 cb       	rjmp	.-2350   	; 0x2838 <main+0x14>
    3166:	83 e0       	ldi	r24, 0x03	; 3
    3168:	67 e0       	ldi	r22, 0x07	; 7
    316a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    316e:	88 23       	and	r24, r24
    3170:	09 f0       	breq	.+2      	; 0x3174 <main+0x950>
    3172:	62 cb       	rjmp	.-2364   	; 0x2838 <main+0x14>
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	64 e0       	ldi	r22, 0x04	; 4
    3178:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    317c:	88 23       	and	r24, r24
    317e:	09 f0       	breq	.+2      	; 0x3182 <main+0x95e>
    3180:	5b cb       	rjmp	.-2378   	; 0x2838 <main+0x14>
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	65 e0       	ldi	r22, 0x05	; 5
    3186:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    318a:	88 23       	and	r24, r24
    318c:	09 f0       	breq	.+2      	; 0x3190 <main+0x96c>
    318e:	54 cb       	rjmp	.-2392   	; 0x2838 <main+0x14>
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	60 e0       	ldi	r22, 0x00	; 0
    3194:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3198:	88 23       	and	r24, r24
    319a:	f1 f2       	breq	.-68     	; 0x3158 <main+0x934>
    319c:	4d cb       	rjmp	.-2406   	; 0x2838 <main+0x14>
		}

		//15:

		else if(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==HIGH && Sensor_Reading(GroupA,PIN0)==HIGH)
    319e:	83 e0       	ldi	r24, 0x03	; 3
    31a0:	60 e0       	ldi	r22, 0x00	; 0
    31a2:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    31a6:	88 23       	and	r24, r24
    31a8:	09 f0       	breq	.+2      	; 0x31ac <main+0x988>
    31aa:	46 cb       	rjmp	.-2420   	; 0x2838 <main+0x14>
    31ac:	83 e0       	ldi	r24, 0x03	; 3
    31ae:	67 e0       	ldi	r22, 0x07	; 7
    31b0:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	09 f0       	breq	.+2      	; 0x31ba <main+0x996>
    31b8:	3f cb       	rjmp	.-2434   	; 0x2838 <main+0x14>
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	64 e0       	ldi	r22, 0x04	; 4
    31be:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    31c2:	81 30       	cpi	r24, 0x01	; 1
    31c4:	09 f0       	breq	.+2      	; 0x31c8 <main+0x9a4>
    31c6:	38 cb       	rjmp	.-2448   	; 0x2838 <main+0x14>
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	65 e0       	ldi	r22, 0x05	; 5
    31cc:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    31d0:	81 30       	cpi	r24, 0x01	; 1
    31d2:	09 f0       	breq	.+2      	; 0x31d6 <main+0x9b2>
    31d4:	31 cb       	rjmp	.-2462   	; 0x2838 <main+0x14>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	60 e0       	ldi	r22, 0x00	; 0
    31da:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    31de:	81 30       	cpi	r24, 0x01	; 1
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <main+0x9c0>
    31e2:	2a cb       	rjmp	.-2476   	; 0x2838 <main+0x14>
		{
			Clean_Array(Array); //Clean The Array of Char.
    31e4:	88 e6       	ldi	r24, 0x68	; 104
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Clean_Array>
			lcd_Clean(); //Clean LCD Screen
    31ec:	0e 94 ef 12 	call	0x25de	; 0x25de <lcd_Clean>
			EEPROM_ReadArray(96,Array); //Call String Which Starts for Location 34 in Memory
    31f0:	28 e6       	ldi	r18, 0x68	; 104
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	80 e6       	ldi	r24, 0x60	; 96
    31f6:	b9 01       	movw	r22, r18
    31f8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <EEPROM_ReadArray>
			lcd_write_command(0x80); //Start Writing on Top Left of LCD ==> Location 0X80
    31fc:	80 e8       	ldi	r24, 0x80	; 128
    31fe:	0e 94 34 10 	call	0x2068	; 0x2068 <lcd_write_command>
			lcd_writeword(Array); //Print GoodBye
    3202:	88 e6       	ldi	r24, 0x68	; 104
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 9a 12 	call	0x2534	; 0x2534 <lcd_writeword>
			while(Sensor_Reading(GroupD,PIN0)==LOW && Sensor_Reading(GroupD,PIN7)==HIGH && Sensor_Reading(GroupB,PIN4)==HIGH && Sensor_Reading(GroupB,PIN5)==HIGH && Sensor_Reading(GroupA,PIN0)==HIGH);
    320a:	83 e0       	ldi	r24, 0x03	; 3
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3212:	88 23       	and	r24, r24
    3214:	09 f0       	breq	.+2      	; 0x3218 <main+0x9f4>
    3216:	10 cb       	rjmp	.-2528   	; 0x2838 <main+0x14>
    3218:	83 e0       	ldi	r24, 0x03	; 3
    321a:	67 e0       	ldi	r22, 0x07	; 7
    321c:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    3220:	81 30       	cpi	r24, 0x01	; 1
    3222:	09 f0       	breq	.+2      	; 0x3226 <main+0xa02>
    3224:	09 cb       	rjmp	.-2542   	; 0x2838 <main+0x14>
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	64 e0       	ldi	r22, 0x04	; 4
    322a:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    322e:	81 30       	cpi	r24, 0x01	; 1
    3230:	09 f0       	breq	.+2      	; 0x3234 <main+0xa10>
    3232:	02 cb       	rjmp	.-2556   	; 0x2838 <main+0x14>
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	65 e0       	ldi	r22, 0x05	; 5
    3238:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    323c:	81 30       	cpi	r24, 0x01	; 1
    323e:	09 f0       	breq	.+2      	; 0x3242 <main+0xa1e>
    3240:	fb ca       	rjmp	.-2570   	; 0x2838 <main+0x14>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	0e 94 35 13 	call	0x266a	; 0x266a <Sensor_Reading>
    324a:	81 30       	cpi	r24, 0x01	; 1
    324c:	f1 f2       	breq	.-68     	; 0x320a <main+0x9e6>
    324e:	f4 ca       	rjmp	.-2584   	; 0x2838 <main+0x14>

00003250 <__prologue_saves__>:
    3250:	2f 92       	push	r2
    3252:	3f 92       	push	r3
    3254:	4f 92       	push	r4
    3256:	5f 92       	push	r5
    3258:	6f 92       	push	r6
    325a:	7f 92       	push	r7
    325c:	8f 92       	push	r8
    325e:	9f 92       	push	r9
    3260:	af 92       	push	r10
    3262:	bf 92       	push	r11
    3264:	cf 92       	push	r12
    3266:	df 92       	push	r13
    3268:	ef 92       	push	r14
    326a:	ff 92       	push	r15
    326c:	0f 93       	push	r16
    326e:	1f 93       	push	r17
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	ca 1b       	sub	r28, r26
    327a:	db 0b       	sbc	r29, r27
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	09 94       	ijmp

00003288 <__epilogue_restores__>:
    3288:	2a 88       	ldd	r2, Y+18	; 0x12
    328a:	39 88       	ldd	r3, Y+17	; 0x11
    328c:	48 88       	ldd	r4, Y+16	; 0x10
    328e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3290:	6e 84       	ldd	r6, Y+14	; 0x0e
    3292:	7d 84       	ldd	r7, Y+13	; 0x0d
    3294:	8c 84       	ldd	r8, Y+12	; 0x0c
    3296:	9b 84       	ldd	r9, Y+11	; 0x0b
    3298:	aa 84       	ldd	r10, Y+10	; 0x0a
    329a:	b9 84       	ldd	r11, Y+9	; 0x09
    329c:	c8 84       	ldd	r12, Y+8	; 0x08
    329e:	df 80       	ldd	r13, Y+7	; 0x07
    32a0:	ee 80       	ldd	r14, Y+6	; 0x06
    32a2:	fd 80       	ldd	r15, Y+5	; 0x05
    32a4:	0c 81       	ldd	r16, Y+4	; 0x04
    32a6:	1b 81       	ldd	r17, Y+3	; 0x03
    32a8:	aa 81       	ldd	r26, Y+2	; 0x02
    32aa:	b9 81       	ldd	r27, Y+1	; 0x01
    32ac:	ce 0f       	add	r28, r30
    32ae:	d1 1d       	adc	r29, r1
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	ed 01       	movw	r28, r26
    32bc:	08 95       	ret

000032be <itoa>:
    32be:	fb 01       	movw	r30, r22
    32c0:	9f 01       	movw	r18, r30
    32c2:	e8 94       	clt
    32c4:	42 30       	cpi	r20, 0x02	; 2
    32c6:	c4 f0       	brlt	.+48     	; 0x32f8 <itoa+0x3a>
    32c8:	45 32       	cpi	r20, 0x25	; 37
    32ca:	b4 f4       	brge	.+44     	; 0x32f8 <itoa+0x3a>
    32cc:	4a 30       	cpi	r20, 0x0A	; 10
    32ce:	29 f4       	brne	.+10     	; 0x32da <itoa+0x1c>
    32d0:	97 fb       	bst	r25, 7
    32d2:	1e f4       	brtc	.+6      	; 0x32da <itoa+0x1c>
    32d4:	90 95       	com	r25
    32d6:	81 95       	neg	r24
    32d8:	9f 4f       	sbci	r25, 0xFF	; 255
    32da:	64 2f       	mov	r22, r20
    32dc:	77 27       	eor	r23, r23
    32de:	0e 94 90 19 	call	0x3320	; 0x3320 <__udivmodhi4>
    32e2:	80 5d       	subi	r24, 0xD0	; 208
    32e4:	8a 33       	cpi	r24, 0x3A	; 58
    32e6:	0c f0       	brlt	.+2      	; 0x32ea <itoa+0x2c>
    32e8:	89 5d       	subi	r24, 0xD9	; 217
    32ea:	81 93       	st	Z+, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	a1 f7       	brne	.-24     	; 0x32da <itoa+0x1c>
    32f2:	16 f4       	brtc	.+4      	; 0x32f8 <itoa+0x3a>
    32f4:	5d e2       	ldi	r21, 0x2D	; 45
    32f6:	51 93       	st	Z+, r21
    32f8:	10 82       	st	Z, r1
    32fa:	c9 01       	movw	r24, r18
    32fc:	0c 94 80 19 	jmp	0x3300	; 0x3300 <strrev>

00003300 <strrev>:
    3300:	dc 01       	movw	r26, r24
    3302:	fc 01       	movw	r30, r24
    3304:	67 2f       	mov	r22, r23
    3306:	71 91       	ld	r23, Z+
    3308:	77 23       	and	r23, r23
    330a:	e1 f7       	brne	.-8      	; 0x3304 <strrev+0x4>
    330c:	32 97       	sbiw	r30, 0x02	; 2
    330e:	04 c0       	rjmp	.+8      	; 0x3318 <strrev+0x18>
    3310:	7c 91       	ld	r23, X
    3312:	6d 93       	st	X+, r22
    3314:	70 83       	st	Z, r23
    3316:	62 91       	ld	r22, -Z
    3318:	ae 17       	cp	r26, r30
    331a:	bf 07       	cpc	r27, r31
    331c:	c8 f3       	brcs	.-14     	; 0x3310 <strrev+0x10>
    331e:	08 95       	ret

00003320 <__udivmodhi4>:
    3320:	aa 1b       	sub	r26, r26
    3322:	bb 1b       	sub	r27, r27
    3324:	51 e1       	ldi	r21, 0x11	; 17
    3326:	07 c0       	rjmp	.+14     	; 0x3336 <__udivmodhi4_ep>

00003328 <__udivmodhi4_loop>:
    3328:	aa 1f       	adc	r26, r26
    332a:	bb 1f       	adc	r27, r27
    332c:	a6 17       	cp	r26, r22
    332e:	b7 07       	cpc	r27, r23
    3330:	10 f0       	brcs	.+4      	; 0x3336 <__udivmodhi4_ep>
    3332:	a6 1b       	sub	r26, r22
    3334:	b7 0b       	sbc	r27, r23

00003336 <__udivmodhi4_ep>:
    3336:	88 1f       	adc	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	5a 95       	dec	r21
    333c:	a9 f7       	brne	.-22     	; 0x3328 <__udivmodhi4_loop>
    333e:	80 95       	com	r24
    3340:	90 95       	com	r25
    3342:	bc 01       	movw	r22, r24
    3344:	cd 01       	movw	r24, r26
    3346:	08 95       	ret

00003348 <_exit>:
    3348:	f8 94       	cli

0000334a <__stop_program>:
    334a:	ff cf       	rjmp	.-2      	; 0x334a <__stop_program>
